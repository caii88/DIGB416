{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HuvaKOh0o7rj"
      },
      "source": [
        "## Cohort Analysis"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VS5ta9Edo7ro"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import datetime as dt\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.cluster import KMeans\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7X223TGJo7rr"
      },
      "source": [
        "### Understand Data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yM_7xXR4o7rr"
      },
      "source": [
        "#### Load data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GB_BhYZHo7rs"
      },
      "outputs": [],
      "source": [
        "data = pd.read_csv('/content/online_retail.csv', index_col=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 434
        },
        "id": "WbJfrb-Zo7rs",
        "outputId": "28635ed9-4ab5-41ba-94f0-36607521f65d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   index InvoiceNo StockCode                          Description  Quantity  \\\n",
              "0      0    536365    85123A   WHITE HANGING HEART T-LIGHT HOLDER         6   \n",
              "1      1    536365     71053                  WHITE METAL LANTERN         6   \n",
              "2      2    536365    84406B       CREAM CUPID HEARTS COAT HANGER         8   \n",
              "3      3    536365    84029G  KNITTED UNION FLAG HOT WATER BOTTLE         6   \n",
              "4      4    536365    84029E       RED WOOLLY HOTTIE WHITE HEART.         6   \n",
              "\n",
              "      InvoiceDate  UnitPrice  CustomerID         Country  \n",
              "0  12/1/2010 8:26       2.55     17850.0  United Kingdom  \n",
              "1  12/1/2010 8:26       3.39     17850.0  United Kingdom  \n",
              "2  12/1/2010 8:26       2.75     17850.0  United Kingdom  \n",
              "3  12/1/2010 8:26       3.39     17850.0  United Kingdom  \n",
              "4  12/1/2010 8:26       3.39     17850.0  United Kingdom  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7254f77d-9cd1-439a-b8be-bc6af82b7d59\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>InvoiceNo</th>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>UnitPrice</th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Country</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>536365</td>\n",
              "      <td>85123A</td>\n",
              "      <td>WHITE HANGING HEART T-LIGHT HOLDER</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/2010 8:26</td>\n",
              "      <td>2.55</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>536365</td>\n",
              "      <td>71053</td>\n",
              "      <td>WHITE METAL LANTERN</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/2010 8:26</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>536365</td>\n",
              "      <td>84406B</td>\n",
              "      <td>CREAM CUPID HEARTS COAT HANGER</td>\n",
              "      <td>8</td>\n",
              "      <td>12/1/2010 8:26</td>\n",
              "      <td>2.75</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>536365</td>\n",
              "      <td>84029G</td>\n",
              "      <td>KNITTED UNION FLAG HOT WATER BOTTLE</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/2010 8:26</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>536365</td>\n",
              "      <td>84029E</td>\n",
              "      <td>RED WOOLLY HOTTIE WHITE HEART.</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/2010 8:26</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7254f77d-9cd1-439a-b8be-bc6af82b7d59')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7254f77d-9cd1-439a-b8be-bc6af82b7d59 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7254f77d-9cd1-439a-b8be-bc6af82b7d59');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-028e7cb5-ef7f-4445-a933-410806cb28ca\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-028e7cb5-ef7f-4445-a933-410806cb28ca')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-028e7cb5-ef7f-4445-a933-410806cb28ca button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data"
            }
          },
          "metadata": {},
          "execution_count": 28
        }
      ],
      "source": [
        "data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yd5Ddni5o7ru",
        "outputId": "99515ecd-30c3-4996-d1bf-acaf5cb86e39"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 541909 entries, 0 to 541908\n",
            "Data columns (total 9 columns):\n",
            " #   Column       Non-Null Count   Dtype  \n",
            "---  ------       --------------   -----  \n",
            " 0   index        541909 non-null  int64  \n",
            " 1   InvoiceNo    541909 non-null  object \n",
            " 2   StockCode    541909 non-null  object \n",
            " 3   Description  540455 non-null  object \n",
            " 4   Quantity     541909 non-null  int64  \n",
            " 5   InvoiceDate  541909 non-null  object \n",
            " 6   UnitPrice    541909 non-null  float64\n",
            " 7   CustomerID   406829 non-null  float64\n",
            " 8   Country      541909 non-null  object \n",
            "dtypes: float64(2), int64(2), object(5)\n",
            "memory usage: 37.2+ MB\n"
          ]
        }
      ],
      "source": [
        "data.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RQsjwp6Ro7ru",
        "outputId": "1a16c44c-2a69-4965-fd2e-61dad3b21f3f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "index\n",
            "[     0      1      2 ... 541906 541907 541908]\n",
            "InvoiceNo\n",
            "['536365' '536365' '536365' ... '581587' '581587' '581587']\n",
            "StockCode\n",
            "['85123A' '71053' '84406B' ... '23254' '23255' '22138']\n",
            "Description\n",
            "['WHITE HANGING HEART T-LIGHT HOLDER' 'WHITE METAL LANTERN'\n",
            " 'CREAM CUPID HEARTS COAT HANGER' ... 'CHILDRENS CUTLERY DOLLY GIRL '\n",
            " 'CHILDRENS CUTLERY CIRCUS PARADE' 'BAKING SET 9 PIECE RETROSPOT ']\n",
            "Quantity\n",
            "[6 6 8 ... 4 4 3]\n",
            "InvoiceDate\n",
            "['12/1/2010 8:26' '12/1/2010 8:26' '12/1/2010 8:26' ... '12/9/2011 12:50'\n",
            " '12/9/2011 12:50' '12/9/2011 12:50']\n",
            "UnitPrice\n",
            "[2.55 3.39 2.75 ... 4.15 4.15 4.95]\n",
            "CustomerID\n",
            "[17850. 17850. 17850. ... 12680. 12680. 12680.]\n",
            "Country\n",
            "['United Kingdom' 'United Kingdom' 'United Kingdom' ... 'France' 'France'\n",
            " 'France']\n"
          ]
        }
      ],
      "source": [
        "for x in data.columns:\n",
        "    print(x)\n",
        "    print(data[x].values)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GUfDU3o6o7rv"
      },
      "source": [
        "### Preprocessing"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9Fhq8qn0o7rv"
      },
      "outputs": [],
      "source": [
        "df = data.copy()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1oJVNAOeo7rv"
      },
      "source": [
        "#### Drop index col"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0nZPdEqno7rw"
      },
      "outputs": [],
      "source": [
        "df = df.drop(columns='index')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Mw8WiloOo7rw"
      },
      "source": [
        "#### Check Null values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "QNA-bAKQo7rw",
        "outputId": "6d351a56-25ae-4702-b60b-7ecd21a53ad7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "InvoiceNo           0\n",
              "StockCode           0\n",
              "Description      1454\n",
              "Quantity            0\n",
              "InvoiceDate         0\n",
              "UnitPrice           0\n",
              "CustomerID     135080\n",
              "Country             0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>InvoiceNo</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>StockCode</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Description</th>\n",
              "      <td>1454</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Quantity</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>InvoiceDate</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>UnitPrice</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CustomerID</th>\n",
              "      <td>135080</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Country</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ],
      "source": [
        "df.isnull().sum()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1G214kx7o7rx"
      },
      "source": [
        "#### Drop missing values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cjZLYiv9o7rx"
      },
      "outputs": [],
      "source": [
        "df= df.dropna(subset=['CustomerID'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "bEAozxhqo7rx",
        "outputId": "38843059-6e9c-4e91-815c-2e01d32479cf"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "InvoiceNo      0\n",
              "StockCode      0\n",
              "Description    0\n",
              "Quantity       0\n",
              "InvoiceDate    0\n",
              "UnitPrice      0\n",
              "CustomerID     0\n",
              "Country        0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>InvoiceNo</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>StockCode</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Description</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Quantity</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>InvoiceDate</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>UnitPrice</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CustomerID</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Country</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ],
      "source": [
        "df.isnull().sum()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "quXMGV6Fo7ry"
      },
      "source": [
        "#### Check & Drop Duplicates"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oS66KO8po7ry",
        "outputId": "7d377671-1573-43d8-d0a5-9ea1bcda7a2d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5225\n"
          ]
        }
      ],
      "source": [
        "print(df.duplicated().sum())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Yba5Fo3Qo7ry"
      },
      "outputs": [],
      "source": [
        "df = df.drop_duplicates()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "myFnnrnBo7ry",
        "outputId": "c23d8089-2681-4527-f768-623713bed6b2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n"
          ]
        }
      ],
      "source": [
        "print(df.duplicated().sum())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RC4nSmHlo7rz"
      },
      "source": [
        "#### Change Datatype\n",
        "- customer ID: String"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GR3GGJPOo7rz"
      },
      "outputs": [],
      "source": [
        "df['CustomerID'] = df['CustomerID'].astype(int).astype(str)\n",
        "df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "pYvafDZNo7rz",
        "outputId": "1dd0ed70-d46b-4559-ab02-9886af052236"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "InvoiceNo              object\n",
              "StockCode              object\n",
              "Description            object\n",
              "Quantity                int64\n",
              "InvoiceDate    datetime64[ns]\n",
              "UnitPrice             float64\n",
              "CustomerID             object\n",
              "Country                object\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>InvoiceNo</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>StockCode</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Description</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Quantity</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>InvoiceDate</th>\n",
              "      <td>datetime64[ns]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>UnitPrice</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CustomerID</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Country</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ],
      "source": [
        "df.dtypes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "j3PhpAFdo7rz",
        "outputId": "bc86d547-d109-452d-82aa-3b0d5b7aedb5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Quantity                    InvoiceDate      UnitPrice\n",
              "count  401604.000000                         401604  401604.000000\n",
              "mean       12.183273  2011-07-10 12:08:23.848567552       3.474064\n",
              "min    -80995.000000            2010-12-01 08:26:00       0.000000\n",
              "25%         2.000000            2011-04-06 15:02:00       1.250000\n",
              "50%         5.000000            2011-07-29 15:40:00       1.950000\n",
              "75%        12.000000            2011-10-20 11:58:30       3.750000\n",
              "max     80995.000000            2011-12-09 12:50:00   38970.000000\n",
              "std       250.283037                            NaN      69.764035"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-877c985e-5107-420e-b31e-8a5da814ac4b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>UnitPrice</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>401604.000000</td>\n",
              "      <td>401604</td>\n",
              "      <td>401604.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>12.183273</td>\n",
              "      <td>2011-07-10 12:08:23.848567552</td>\n",
              "      <td>3.474064</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-80995.000000</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2.000000</td>\n",
              "      <td>2011-04-06 15:02:00</td>\n",
              "      <td>1.250000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>5.000000</td>\n",
              "      <td>2011-07-29 15:40:00</td>\n",
              "      <td>1.950000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>12.000000</td>\n",
              "      <td>2011-10-20 11:58:30</td>\n",
              "      <td>3.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>80995.000000</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>38970.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>250.283037</td>\n",
              "      <td>NaN</td>\n",
              "      <td>69.764035</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-877c985e-5107-420e-b31e-8a5da814ac4b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-877c985e-5107-420e-b31e-8a5da814ac4b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-877c985e-5107-420e-b31e-8a5da814ac4b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6e60a971-f187-45dd-8ef9-ef53959d7112\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6e60a971-f187-45dd-8ef9-ef53959d7112')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6e60a971-f187-45dd-8ef9-ef53959d7112 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 148428.54212677467,\n        \"min\": -80995.0,\n        \"max\": 401604.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.183272576966365,\n          12.0,\n          401604.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InvoiceDate\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1970-01-01 00:00:00.000401604\",\n        \"max\": \"2011-12-09 12:50:00\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"401604\",\n          \"2011-07-10 12:08:23.848567552\",\n          \"2011-10-20 11:58:30\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"UnitPrice\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 140678.1658499799,\n        \"min\": 0.0,\n        \"max\": 401604.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.4740636398043865,\n          3.75,\n          401604.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 41
        }
      ],
      "source": [
        "df.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G9HN_vzTo7r0",
        "outputId": "2d6a4d8a-9f48-4e20-f9aa-26105b1cca14"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(401604, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ],
      "source": [
        "df.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vmcH5NyPo7r0"
      },
      "source": [
        "#### Quantity & Unit Price Filter\n",
        "- Filter Quantity > 0 & Unit Price > 0"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 791
        },
        "id": "1oO0pWnao7r0",
        "outputId": "68466fb6-fdf0-4c94-edd5-76738a0c9aeb"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       InvoiceNo StockCode                       Description  Quantity  \\\n",
              "141      C536379         D                          Discount        -1   \n",
              "154      C536383    35004C   SET OF 3 COLOURED  FLYING DUCKS        -1   \n",
              "235      C536391     22556    PLASTERS IN TIN CIRCUS PARADE        -12   \n",
              "236      C536391     21984  PACK OF 12 PINK PAISLEY TISSUES        -24   \n",
              "237      C536391     21983  PACK OF 12 BLUE PAISLEY TISSUES        -24   \n",
              "...          ...       ...                               ...       ...   \n",
              "540449   C581490     23144   ZINC T-LIGHT HOLDER STARS SMALL       -11   \n",
              "541541   C581499         M                            Manual        -1   \n",
              "541715   C581568     21258        VICTORIAN SEWING BOX LARGE        -5   \n",
              "541716   C581569     84978  HANGING HEART JAR T-LIGHT HOLDER        -1   \n",
              "541717   C581569     20979     36 PENCILS TUBE RED RETROSPOT        -5   \n",
              "\n",
              "               InvoiceDate  UnitPrice CustomerID         Country  \n",
              "141    2010-12-01 09:41:00      27.50      14527  United Kingdom  \n",
              "154    2010-12-01 09:49:00       4.65      15311  United Kingdom  \n",
              "235    2010-12-01 10:24:00       1.65      17548  United Kingdom  \n",
              "236    2010-12-01 10:24:00       0.29      17548  United Kingdom  \n",
              "237    2010-12-01 10:24:00       0.29      17548  United Kingdom  \n",
              "...                    ...        ...        ...             ...  \n",
              "540449 2011-12-09 09:57:00       0.83      14397  United Kingdom  \n",
              "541541 2011-12-09 10:28:00     224.69      15498  United Kingdom  \n",
              "541715 2011-12-09 11:57:00      10.95      15311  United Kingdom  \n",
              "541716 2011-12-09 11:58:00       1.25      17315  United Kingdom  \n",
              "541717 2011-12-09 11:58:00       1.25      17315  United Kingdom  \n",
              "\n",
              "[8872 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a851af2e-6cb0-42d4-9415-a154c1f2490d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>InvoiceNo</th>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>UnitPrice</th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Country</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>141</th>\n",
              "      <td>C536379</td>\n",
              "      <td>D</td>\n",
              "      <td>Discount</td>\n",
              "      <td>-1</td>\n",
              "      <td>2010-12-01 09:41:00</td>\n",
              "      <td>27.50</td>\n",
              "      <td>14527</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>154</th>\n",
              "      <td>C536383</td>\n",
              "      <td>35004C</td>\n",
              "      <td>SET OF 3 COLOURED  FLYING DUCKS</td>\n",
              "      <td>-1</td>\n",
              "      <td>2010-12-01 09:49:00</td>\n",
              "      <td>4.65</td>\n",
              "      <td>15311</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>235</th>\n",
              "      <td>C536391</td>\n",
              "      <td>22556</td>\n",
              "      <td>PLASTERS IN TIN CIRCUS PARADE</td>\n",
              "      <td>-12</td>\n",
              "      <td>2010-12-01 10:24:00</td>\n",
              "      <td>1.65</td>\n",
              "      <td>17548</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>236</th>\n",
              "      <td>C536391</td>\n",
              "      <td>21984</td>\n",
              "      <td>PACK OF 12 PINK PAISLEY TISSUES</td>\n",
              "      <td>-24</td>\n",
              "      <td>2010-12-01 10:24:00</td>\n",
              "      <td>0.29</td>\n",
              "      <td>17548</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>237</th>\n",
              "      <td>C536391</td>\n",
              "      <td>21983</td>\n",
              "      <td>PACK OF 12 BLUE PAISLEY TISSUES</td>\n",
              "      <td>-24</td>\n",
              "      <td>2010-12-01 10:24:00</td>\n",
              "      <td>0.29</td>\n",
              "      <td>17548</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>540449</th>\n",
              "      <td>C581490</td>\n",
              "      <td>23144</td>\n",
              "      <td>ZINC T-LIGHT HOLDER STARS SMALL</td>\n",
              "      <td>-11</td>\n",
              "      <td>2011-12-09 09:57:00</td>\n",
              "      <td>0.83</td>\n",
              "      <td>14397</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541541</th>\n",
              "      <td>C581499</td>\n",
              "      <td>M</td>\n",
              "      <td>Manual</td>\n",
              "      <td>-1</td>\n",
              "      <td>2011-12-09 10:28:00</td>\n",
              "      <td>224.69</td>\n",
              "      <td>15498</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541715</th>\n",
              "      <td>C581568</td>\n",
              "      <td>21258</td>\n",
              "      <td>VICTORIAN SEWING BOX LARGE</td>\n",
              "      <td>-5</td>\n",
              "      <td>2011-12-09 11:57:00</td>\n",
              "      <td>10.95</td>\n",
              "      <td>15311</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541716</th>\n",
              "      <td>C581569</td>\n",
              "      <td>84978</td>\n",
              "      <td>HANGING HEART JAR T-LIGHT HOLDER</td>\n",
              "      <td>-1</td>\n",
              "      <td>2011-12-09 11:58:00</td>\n",
              "      <td>1.25</td>\n",
              "      <td>17315</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541717</th>\n",
              "      <td>C581569</td>\n",
              "      <td>20979</td>\n",
              "      <td>36 PENCILS TUBE RED RETROSPOT</td>\n",
              "      <td>-5</td>\n",
              "      <td>2011-12-09 11:58:00</td>\n",
              "      <td>1.25</td>\n",
              "      <td>17315</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8872 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a851af2e-6cb0-42d4-9415-a154c1f2490d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a851af2e-6cb0-42d4-9415-a154c1f2490d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a851af2e-6cb0-42d4-9415-a154c1f2490d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c97eaf40-51ff-420d-aa0f-c325b49b10b8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c97eaf40-51ff-420d-aa0f-c325b49b10b8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c97eaf40-51ff-420d-aa0f-c325b49b10b8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[df['Quantity']<0]\",\n  \"rows\": 8872,\n  \"fields\": [\n    {\n      \"column\": \"InvoiceNo\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3654,\n        \"samples\": [\n          \"C551699\",\n          \"C555935\",\n          \"C539195\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"StockCode\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1920,\n        \"samples\": [\n          \"21239\",\n          \"84031A\",\n          \"22471\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Description\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1945,\n        \"samples\": [\n          \"HEART MIRROR ANTIQUE WHITE\",\n          \"VINTAGE RED TRIM ENAMEL BOWL \",\n          \"ANT WHITE WIRE HEART SPIRAL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1172,\n        \"min\": -80995,\n        \"max\": -1,\n        \"num_unique_values\": 134,\n        \"samples\": [\n          -67,\n          -51,\n          -312\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InvoiceDate\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-12-01 09:41:00\",\n        \"max\": \"2011-12-09 11:58:00\",\n        \"num_unique_values\": 3586,\n        \"samples\": [\n          \"2011-11-10 11:14:00\",\n          \"2011-11-08 12:10:00\",\n          \"2011-03-20 10:17:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"UnitPrice\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 445.19086354735435,\n        \"min\": 0.01,\n        \"max\": 38970.0,\n        \"num_unique_values\": 376,\n        \"samples\": [\n          1829.84,\n          14.88,\n          5.49\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1589,\n        \"samples\": [\n          \"12830\",\n          \"15694\",\n          \"12670\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 28,\n        \"samples\": [\n          \"Israel\",\n          \"Greece\",\n          \"Austria\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 43
        }
      ],
      "source": [
        "df[df['Quantity']<0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "gKeolQOOo7r1",
        "outputId": "b7f1c70e-5131-4187-9d51-60e6cb8d3231"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "StockCode  Description\n",
              "M          Manual         460\n",
              "D          Discount        77\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>M</th>\n",
              "      <th>Manual</th>\n",
              "      <td>460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>D</th>\n",
              "      <th>Discount</th>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ],
      "source": [
        "df[df['StockCode'].str.len() == 1][['StockCode','Description']].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 118
        },
        "id": "F3Of14FBo7r1",
        "outputId": "e6547118-6151-4ca0-c2e6-beaa80d22283"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    InvoiceNo StockCode Description  Quantity         InvoiceDate  UnitPrice  \\\n",
              "141   C536379         D    Discount        -1 2010-12-01 09:41:00       27.5   \n",
              "\n",
              "    CustomerID         Country  \n",
              "141      14527  United Kingdom  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b8da859c-477f-41bb-9e0e-e799eba0fab9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>InvoiceNo</th>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>UnitPrice</th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Country</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>141</th>\n",
              "      <td>C536379</td>\n",
              "      <td>D</td>\n",
              "      <td>Discount</td>\n",
              "      <td>-1</td>\n",
              "      <td>2010-12-01 09:41:00</td>\n",
              "      <td>27.5</td>\n",
              "      <td>14527</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b8da859c-477f-41bb-9e0e-e799eba0fab9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b8da859c-477f-41bb-9e0e-e799eba0fab9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b8da859c-477f-41bb-9e0e-e799eba0fab9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[(df['Quantity']<0) & (df['InvoiceNo'] == 'C536379')]\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"InvoiceNo\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"C536379\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"StockCode\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"D\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Discount\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": -1,\n        \"max\": -1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InvoiceDate\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-12-01 09:41:00\",\n        \"max\": \"2010-12-01 09:41:00\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"2010-12-01 09:41:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"UnitPrice\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 27.5,\n        \"max\": 27.5,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          27.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"14527\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"United Kingdom\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 45
        }
      ],
      "source": [
        "df[(df['Quantity']<0) & (df['InvoiceNo'] == 'C536379')]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 147
        },
        "id": "K1y0E2X1o7r1",
        "outputId": "4293c952-f16e-4320-e2a8-968c752906f0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "StockCode  Description\n",
              "D          Discount       77\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>D</th>\n",
              "      <th>Discount</th>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ],
      "source": [
        "df[(df['Quantity']<0) & (df['Description'] == 'Discount')][['StockCode','Description']].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "I8tThDYbo7r1",
        "outputId": "0d8b2ca0-7962-49e6-c28c-dc4b5200eb19"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       InvoiceNo StockCode                          Description  Quantity  \\\n",
              "9302      537197     22841         ROUND CAKE TIN VINTAGE GREEN         1   \n",
              "33576     539263     22580         ADVENT CALENDAR GINGHAM SACK         4   \n",
              "40089     539722     22423             REGENCY CAKESTAND 3 TIER        10   \n",
              "47068     540372     22090              PAPER BUNTING RETROSPOT        24   \n",
              "47070     540372     22553               PLASTERS IN TIN SKULLS        24   \n",
              "56674     541109     22168        ORGANISER WOOD ANTIQUE WHITE          1   \n",
              "86789     543599    84535B         FAIRY CAKES NOTEBOOK A6 SIZE        16   \n",
              "130188    547417     22062  CERAMIC BOWL WITH LOVE HEART DESIGN        36   \n",
              "139453    548318     22055   MINI CAKE STAND  HANGING STRAWBERY         5   \n",
              "145208    548871     22162          HEART GARLAND RUSTIC PADDED         2   \n",
              "157042    550188     22636   CHILDS BREAKFAST SET CIRCUS PARADE         1   \n",
              "187613    553000     47566                        PARTY BUNTING         4   \n",
              "198383    554037     22619            SET OF 6 SOLDIER SKITTLES        80   \n",
              "279324    561284     22167           OVAL WALL MIRROR DIAMANTE          1   \n",
              "282912    561669     22960             JAM MAKING SET WITH JARS        11   \n",
              "285657    561916         M                               Manual         1   \n",
              "298054    562973     23157           SET OF 6 NATIVITY MAGNETS        240   \n",
              "314745    564651     23270     SET OF 2 CERAMIC PAINTED HEARTS         96   \n",
              "314746    564651     23268  SET OF 2 CERAMIC CHRISTMAS REINDEER       192   \n",
              "314747    564651     22955             36 FOIL STAR CAKE CASES        144   \n",
              "314748    564651     21786                   POLKADOT RAIN HAT        144   \n",
              "358655    568158      PADS           PADS TO MATCH ALL CUSHIONS         1   \n",
              "361825    568384         M                               Manual         1   \n",
              "379913    569716     22778                   GLASS CLOCHE SMALL         2   \n",
              "395529    571035         M                               Manual         1   \n",
              "420404    572893     21208          PASTEL COLOUR HONEYCOMB FAN         5   \n",
              "436428    574138     23234        BISCUIT TIN VINTAGE CHRISTMAS       216   \n",
              "436597    574175     22065       CHRISTMAS PUDDING TRINKET POT         12   \n",
              "436961    574252         M                               Manual         1   \n",
              "439361    574469     22385            JUMBO BAG SPACEBOY DESIGN        12   \n",
              "446125    574879     22625                   RED KITCHEN SCALES         2   \n",
              "446793    574920     22899         CHILDREN'S APRON DOLLY GIRL          1   \n",
              "446794    574920     23480       MINI LIGHTS WOODLAND MUSHROOMS         1   \n",
              "454463    575579     22437        SET OF 9 BLACK SKULL BALLOONS        20   \n",
              "454464    575579     22089        PAPER BUNTING VINTAGE PAISLEY        24   \n",
              "479079    577129     22464          HANGING METAL HEART LANTERN         4   \n",
              "479546    577168         M                               Manual         1   \n",
              "480649    577314     23407       SET OF 2 TRAYS HOME SWEET HOME         2   \n",
              "485985    577696         M                               Manual         1   \n",
              "502122    578841     84826       ASSTD DESIGN 3D PAPER STICKERS     12540   \n",
              "\n",
              "               InvoiceDate  UnitPrice CustomerID         Country  \n",
              "9302   2010-12-05 14:02:00        0.0      12647         Germany  \n",
              "33576  2010-12-16 14:36:00        0.0      16560  United Kingdom  \n",
              "40089  2010-12-21 13:45:00        0.0      14911            EIRE  \n",
              "47068  2011-01-06 16:41:00        0.0      13081  United Kingdom  \n",
              "47070  2011-01-06 16:41:00        0.0      13081  United Kingdom  \n",
              "56674  2011-01-13 15:10:00        0.0      15107  United Kingdom  \n",
              "86789  2011-02-10 13:08:00        0.0      17560  United Kingdom  \n",
              "130188 2011-03-23 10:25:00        0.0      13239  United Kingdom  \n",
              "139453 2011-03-30 12:45:00        0.0      13113  United Kingdom  \n",
              "145208 2011-04-04 14:42:00        0.0      14410  United Kingdom  \n",
              "157042 2011-04-14 18:57:00        0.0      12457     Switzerland  \n",
              "187613 2011-05-12 15:21:00        0.0      17667  United Kingdom  \n",
              "198383 2011-05-20 14:13:00        0.0      12415       Australia  \n",
              "279324 2011-07-26 12:24:00        0.0      16818  United Kingdom  \n",
              "282912 2011-07-28 17:09:00        0.0      12507           Spain  \n",
              "285657 2011-08-01 11:44:00        0.0      15581  United Kingdom  \n",
              "298054 2011-08-11 11:42:00        0.0      14911            EIRE  \n",
              "314745 2011-08-26 14:19:00        0.0      14646     Netherlands  \n",
              "314746 2011-08-26 14:19:00        0.0      14646     Netherlands  \n",
              "314747 2011-08-26 14:19:00        0.0      14646     Netherlands  \n",
              "314748 2011-08-26 14:19:00        0.0      14646     Netherlands  \n",
              "358655 2011-09-25 12:22:00        0.0      16133  United Kingdom  \n",
              "361825 2011-09-27 09:46:00        0.0      12748  United Kingdom  \n",
              "379913 2011-10-06 08:17:00        0.0      15804  United Kingdom  \n",
              "395529 2011-10-13 12:50:00        0.0      12446             RSA  \n",
              "420404 2011-10-26 14:36:00        0.0      18059  United Kingdom  \n",
              "436428 2011-11-03 11:26:00        0.0      12415       Australia  \n",
              "436597 2011-11-03 11:47:00        0.0      14110  United Kingdom  \n",
              "436961 2011-11-03 13:24:00        0.0      12437          France  \n",
              "439361 2011-11-04 11:55:00        0.0      12431       Australia  \n",
              "446125 2011-11-07 13:22:00        0.0      13014  United Kingdom  \n",
              "446793 2011-11-07 16:34:00        0.0      13985  United Kingdom  \n",
              "446794 2011-11-07 16:34:00        0.0      13985  United Kingdom  \n",
              "454463 2011-11-10 11:49:00        0.0      13081  United Kingdom  \n",
              "454464 2011-11-10 11:49:00        0.0      13081  United Kingdom  \n",
              "479079 2011-11-17 19:52:00        0.0      15602  United Kingdom  \n",
              "479546 2011-11-18 10:42:00        0.0      12603         Germany  \n",
              "480649 2011-11-18 13:23:00        0.0      12444          Norway  \n",
              "485985 2011-11-21 11:57:00        0.0      16406  United Kingdom  \n",
              "502122 2011-11-25 15:57:00        0.0      13256  United Kingdom  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4d6877f6-199b-4245-9ca8-b6075332805a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>InvoiceNo</th>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>UnitPrice</th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Country</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>9302</th>\n",
              "      <td>537197</td>\n",
              "      <td>22841</td>\n",
              "      <td>ROUND CAKE TIN VINTAGE GREEN</td>\n",
              "      <td>1</td>\n",
              "      <td>2010-12-05 14:02:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12647</td>\n",
              "      <td>Germany</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33576</th>\n",
              "      <td>539263</td>\n",
              "      <td>22580</td>\n",
              "      <td>ADVENT CALENDAR GINGHAM SACK</td>\n",
              "      <td>4</td>\n",
              "      <td>2010-12-16 14:36:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>16560</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40089</th>\n",
              "      <td>539722</td>\n",
              "      <td>22423</td>\n",
              "      <td>REGENCY CAKESTAND 3 TIER</td>\n",
              "      <td>10</td>\n",
              "      <td>2010-12-21 13:45:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>14911</td>\n",
              "      <td>EIRE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47068</th>\n",
              "      <td>540372</td>\n",
              "      <td>22090</td>\n",
              "      <td>PAPER BUNTING RETROSPOT</td>\n",
              "      <td>24</td>\n",
              "      <td>2011-01-06 16:41:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13081</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47070</th>\n",
              "      <td>540372</td>\n",
              "      <td>22553</td>\n",
              "      <td>PLASTERS IN TIN SKULLS</td>\n",
              "      <td>24</td>\n",
              "      <td>2011-01-06 16:41:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13081</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56674</th>\n",
              "      <td>541109</td>\n",
              "      <td>22168</td>\n",
              "      <td>ORGANISER WOOD ANTIQUE WHITE</td>\n",
              "      <td>1</td>\n",
              "      <td>2011-01-13 15:10:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>15107</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>86789</th>\n",
              "      <td>543599</td>\n",
              "      <td>84535B</td>\n",
              "      <td>FAIRY CAKES NOTEBOOK A6 SIZE</td>\n",
              "      <td>16</td>\n",
              "      <td>2011-02-10 13:08:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>17560</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>130188</th>\n",
              "      <td>547417</td>\n",
              "      <td>22062</td>\n",
              "      <td>CERAMIC BOWL WITH LOVE HEART DESIGN</td>\n",
              "      <td>36</td>\n",
              "      <td>2011-03-23 10:25:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13239</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>139453</th>\n",
              "      <td>548318</td>\n",
              "      <td>22055</td>\n",
              "      <td>MINI CAKE STAND  HANGING STRAWBERY</td>\n",
              "      <td>5</td>\n",
              "      <td>2011-03-30 12:45:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13113</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145208</th>\n",
              "      <td>548871</td>\n",
              "      <td>22162</td>\n",
              "      <td>HEART GARLAND RUSTIC PADDED</td>\n",
              "      <td>2</td>\n",
              "      <td>2011-04-04 14:42:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>14410</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>157042</th>\n",
              "      <td>550188</td>\n",
              "      <td>22636</td>\n",
              "      <td>CHILDS BREAKFAST SET CIRCUS PARADE</td>\n",
              "      <td>1</td>\n",
              "      <td>2011-04-14 18:57:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12457</td>\n",
              "      <td>Switzerland</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>187613</th>\n",
              "      <td>553000</td>\n",
              "      <td>47566</td>\n",
              "      <td>PARTY BUNTING</td>\n",
              "      <td>4</td>\n",
              "      <td>2011-05-12 15:21:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>17667</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>198383</th>\n",
              "      <td>554037</td>\n",
              "      <td>22619</td>\n",
              "      <td>SET OF 6 SOLDIER SKITTLES</td>\n",
              "      <td>80</td>\n",
              "      <td>2011-05-20 14:13:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12415</td>\n",
              "      <td>Australia</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>279324</th>\n",
              "      <td>561284</td>\n",
              "      <td>22167</td>\n",
              "      <td>OVAL WALL MIRROR DIAMANTE</td>\n",
              "      <td>1</td>\n",
              "      <td>2011-07-26 12:24:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>16818</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>282912</th>\n",
              "      <td>561669</td>\n",
              "      <td>22960</td>\n",
              "      <td>JAM MAKING SET WITH JARS</td>\n",
              "      <td>11</td>\n",
              "      <td>2011-07-28 17:09:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12507</td>\n",
              "      <td>Spain</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>285657</th>\n",
              "      <td>561916</td>\n",
              "      <td>M</td>\n",
              "      <td>Manual</td>\n",
              "      <td>1</td>\n",
              "      <td>2011-08-01 11:44:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>15581</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>298054</th>\n",
              "      <td>562973</td>\n",
              "      <td>23157</td>\n",
              "      <td>SET OF 6 NATIVITY MAGNETS</td>\n",
              "      <td>240</td>\n",
              "      <td>2011-08-11 11:42:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>14911</td>\n",
              "      <td>EIRE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>314745</th>\n",
              "      <td>564651</td>\n",
              "      <td>23270</td>\n",
              "      <td>SET OF 2 CERAMIC PAINTED HEARTS</td>\n",
              "      <td>96</td>\n",
              "      <td>2011-08-26 14:19:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>14646</td>\n",
              "      <td>Netherlands</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>314746</th>\n",
              "      <td>564651</td>\n",
              "      <td>23268</td>\n",
              "      <td>SET OF 2 CERAMIC CHRISTMAS REINDEER</td>\n",
              "      <td>192</td>\n",
              "      <td>2011-08-26 14:19:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>14646</td>\n",
              "      <td>Netherlands</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>314747</th>\n",
              "      <td>564651</td>\n",
              "      <td>22955</td>\n",
              "      <td>36 FOIL STAR CAKE CASES</td>\n",
              "      <td>144</td>\n",
              "      <td>2011-08-26 14:19:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>14646</td>\n",
              "      <td>Netherlands</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>314748</th>\n",
              "      <td>564651</td>\n",
              "      <td>21786</td>\n",
              "      <td>POLKADOT RAIN HAT</td>\n",
              "      <td>144</td>\n",
              "      <td>2011-08-26 14:19:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>14646</td>\n",
              "      <td>Netherlands</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>358655</th>\n",
              "      <td>568158</td>\n",
              "      <td>PADS</td>\n",
              "      <td>PADS TO MATCH ALL CUSHIONS</td>\n",
              "      <td>1</td>\n",
              "      <td>2011-09-25 12:22:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>16133</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>361825</th>\n",
              "      <td>568384</td>\n",
              "      <td>M</td>\n",
              "      <td>Manual</td>\n",
              "      <td>1</td>\n",
              "      <td>2011-09-27 09:46:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12748</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>379913</th>\n",
              "      <td>569716</td>\n",
              "      <td>22778</td>\n",
              "      <td>GLASS CLOCHE SMALL</td>\n",
              "      <td>2</td>\n",
              "      <td>2011-10-06 08:17:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>15804</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>395529</th>\n",
              "      <td>571035</td>\n",
              "      <td>M</td>\n",
              "      <td>Manual</td>\n",
              "      <td>1</td>\n",
              "      <td>2011-10-13 12:50:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12446</td>\n",
              "      <td>RSA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>420404</th>\n",
              "      <td>572893</td>\n",
              "      <td>21208</td>\n",
              "      <td>PASTEL COLOUR HONEYCOMB FAN</td>\n",
              "      <td>5</td>\n",
              "      <td>2011-10-26 14:36:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>18059</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>436428</th>\n",
              "      <td>574138</td>\n",
              "      <td>23234</td>\n",
              "      <td>BISCUIT TIN VINTAGE CHRISTMAS</td>\n",
              "      <td>216</td>\n",
              "      <td>2011-11-03 11:26:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12415</td>\n",
              "      <td>Australia</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>436597</th>\n",
              "      <td>574175</td>\n",
              "      <td>22065</td>\n",
              "      <td>CHRISTMAS PUDDING TRINKET POT</td>\n",
              "      <td>12</td>\n",
              "      <td>2011-11-03 11:47:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>14110</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>436961</th>\n",
              "      <td>574252</td>\n",
              "      <td>M</td>\n",
              "      <td>Manual</td>\n",
              "      <td>1</td>\n",
              "      <td>2011-11-03 13:24:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12437</td>\n",
              "      <td>France</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>439361</th>\n",
              "      <td>574469</td>\n",
              "      <td>22385</td>\n",
              "      <td>JUMBO BAG SPACEBOY DESIGN</td>\n",
              "      <td>12</td>\n",
              "      <td>2011-11-04 11:55:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12431</td>\n",
              "      <td>Australia</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>446125</th>\n",
              "      <td>574879</td>\n",
              "      <td>22625</td>\n",
              "      <td>RED KITCHEN SCALES</td>\n",
              "      <td>2</td>\n",
              "      <td>2011-11-07 13:22:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13014</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>446793</th>\n",
              "      <td>574920</td>\n",
              "      <td>22899</td>\n",
              "      <td>CHILDREN'S APRON DOLLY GIRL</td>\n",
              "      <td>1</td>\n",
              "      <td>2011-11-07 16:34:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13985</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>446794</th>\n",
              "      <td>574920</td>\n",
              "      <td>23480</td>\n",
              "      <td>MINI LIGHTS WOODLAND MUSHROOMS</td>\n",
              "      <td>1</td>\n",
              "      <td>2011-11-07 16:34:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13985</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>454463</th>\n",
              "      <td>575579</td>\n",
              "      <td>22437</td>\n",
              "      <td>SET OF 9 BLACK SKULL BALLOONS</td>\n",
              "      <td>20</td>\n",
              "      <td>2011-11-10 11:49:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13081</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>454464</th>\n",
              "      <td>575579</td>\n",
              "      <td>22089</td>\n",
              "      <td>PAPER BUNTING VINTAGE PAISLEY</td>\n",
              "      <td>24</td>\n",
              "      <td>2011-11-10 11:49:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13081</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>479079</th>\n",
              "      <td>577129</td>\n",
              "      <td>22464</td>\n",
              "      <td>HANGING METAL HEART LANTERN</td>\n",
              "      <td>4</td>\n",
              "      <td>2011-11-17 19:52:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>15602</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>479546</th>\n",
              "      <td>577168</td>\n",
              "      <td>M</td>\n",
              "      <td>Manual</td>\n",
              "      <td>1</td>\n",
              "      <td>2011-11-18 10:42:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12603</td>\n",
              "      <td>Germany</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>480649</th>\n",
              "      <td>577314</td>\n",
              "      <td>23407</td>\n",
              "      <td>SET OF 2 TRAYS HOME SWEET HOME</td>\n",
              "      <td>2</td>\n",
              "      <td>2011-11-18 13:23:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12444</td>\n",
              "      <td>Norway</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>485985</th>\n",
              "      <td>577696</td>\n",
              "      <td>M</td>\n",
              "      <td>Manual</td>\n",
              "      <td>1</td>\n",
              "      <td>2011-11-21 11:57:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>16406</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>502122</th>\n",
              "      <td>578841</td>\n",
              "      <td>84826</td>\n",
              "      <td>ASSTD DESIGN 3D PAPER STICKERS</td>\n",
              "      <td>12540</td>\n",
              "      <td>2011-11-25 15:57:00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13256</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4d6877f6-199b-4245-9ca8-b6075332805a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4d6877f6-199b-4245-9ca8-b6075332805a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4d6877f6-199b-4245-9ca8-b6075332805a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d90a2cd2-f2e6-49c3-be38-41c48573b757\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d90a2cd2-f2e6-49c3-be38-41c48573b757')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d90a2cd2-f2e6-49c3-be38-41c48573b757 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[df['UnitPrice']==0]\",\n  \"rows\": 40,\n  \"fields\": [\n    {\n      \"column\": \"InvoiceNo\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 34,\n        \"samples\": [\n          \"562973\",\n          \"569716\",\n          \"574920\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"StockCode\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 35,\n        \"samples\": [\n          \"22385\",\n          \"22167\",\n          \"23234\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 35,\n        \"samples\": [\n          \"JUMBO BAG SPACEBOY DESIGN\",\n          \" OVAL WALL MIRROR DIAMANTE \",\n          \"BISCUIT TIN VINTAGE CHRISTMAS\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1978,\n        \"min\": 1,\n        \"max\": 12540,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1,\n          4,\n          80\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InvoiceDate\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-12-05 14:02:00\",\n        \"max\": \"2011-11-25 15:57:00\",\n        \"num_unique_values\": 34,\n        \"samples\": [\n          \"2011-08-11 11:42:00\",\n          \"2011-10-06 08:17:00\",\n          \"2011-11-07 16:34:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"UnitPrice\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 31,\n        \"samples\": [\n          \"12603\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"France\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 47
        }
      ],
      "source": [
        "df[df['UnitPrice']==0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2BRTLtWVo7r2"
      },
      "outputs": [],
      "source": [
        "df = df[(df['Quantity']>0) & (df['UnitPrice']>0)]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hHB5gRG0o7r2",
        "outputId": "acde6ea9-581e-41c7-f73d-e68194f27893"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(392692, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ],
      "source": [
        "df.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DSmDz97So7r2"
      },
      "source": [
        "## EDA"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "UKcqZk6Vo7r3",
        "outputId": "8ba988da-f58a-4c51-d909-a554480ea7e0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Quantity                    InvoiceDate      UnitPrice\n",
              "count  392692.000000                         392692  392692.000000\n",
              "mean       13.119702  2011-07-10 19:13:07.771892480       3.125914\n",
              "min         1.000000            2010-12-01 08:26:00       0.001000\n",
              "25%         2.000000            2011-04-07 11:12:00       1.250000\n",
              "50%         6.000000            2011-07-31 12:02:00       1.950000\n",
              "75%        12.000000            2011-10-20 12:53:00       3.750000\n",
              "max     80995.000000            2011-12-09 12:50:00    8142.750000\n",
              "std       180.492832                            NaN      22.241836"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d663d6a4-b048-4bf7-b5c4-ab7bf07756c3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>UnitPrice</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>392692.000000</td>\n",
              "      <td>392692</td>\n",
              "      <td>392692.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>13.119702</td>\n",
              "      <td>2011-07-10 19:13:07.771892480</td>\n",
              "      <td>3.125914</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>0.001000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2.000000</td>\n",
              "      <td>2011-04-07 11:12:00</td>\n",
              "      <td>1.250000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>6.000000</td>\n",
              "      <td>2011-07-31 12:02:00</td>\n",
              "      <td>1.950000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>12.000000</td>\n",
              "      <td>2011-10-20 12:53:00</td>\n",
              "      <td>3.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>80995.000000</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>8142.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>180.492832</td>\n",
              "      <td>NaN</td>\n",
              "      <td>22.241836</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d663d6a4-b048-4bf7-b5c4-ab7bf07756c3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d663d6a4-b048-4bf7-b5c4-ab7bf07756c3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d663d6a4-b048-4bf7-b5c4-ab7bf07756c3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3812c977-a0c7-4cd1-9abb-9b444cfb2431\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3812c977-a0c7-4cd1-9abb-9b444cfb2431')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3812c977-a0c7-4cd1-9abb-9b444cfb2431 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 137682.02887632325,\n        \"min\": 1.0,\n        \"max\": 392692.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13.1197019547126,\n          12.0,\n          392692.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InvoiceDate\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1970-01-01 00:00:00.000392692\",\n        \"max\": \"2011-12-09 12:50:00\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"392692\",\n          \"2011-07-10 19:13:07.771892480\",\n          \"2011-10-20 12:53:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"UnitPrice\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 138453.96909880062,\n        \"min\": 0.001,\n        \"max\": 392692.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.125913907082396,\n          3.75,\n          392692.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 50
        }
      ],
      "source": [
        "df.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "jbyQDT5vo7r3",
        "outputId": "151e26a2-0d8b-437c-9e6b-b56cc9f756ae"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0         17850\n",
              "1         17850\n",
              "2         17850\n",
              "3         17850\n",
              "4         17850\n",
              "          ...  \n",
              "541904    12680\n",
              "541905    12680\n",
              "541906    12680\n",
              "541907    12680\n",
              "541908    12680\n",
              "Name: CustomerID, Length: 392692, dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>17850</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>17850</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17850</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>17850</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17850</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541904</th>\n",
              "      <td>12680</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541905</th>\n",
              "      <td>12680</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541906</th>\n",
              "      <td>12680</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541907</th>\n",
              "      <td>12680</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541908</th>\n",
              "      <td>12680</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>392692 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ],
      "source": [
        "df['CustomerID']"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gPs44TpYo7r3"
      },
      "source": [
        "### Understand Values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nPhWmhHXo7r_",
        "outputId": "a0e3374e-7d2a-4420-905c-34dd66994417"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of unique invoices: 18532\n",
            "Number of unique products: 3665\n",
            "Number of unique descriptions: 3877\n"
          ]
        }
      ],
      "source": [
        "print(f\"Number of unique invoices: {df['InvoiceNo'].nunique()}\")\n",
        "print(f\"Number of unique products: {df['StockCode'].nunique()}\")\n",
        "print(f\"Number of unique descriptions: {df['Description'].nunique()}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l0OoCq3Oo7sA",
        "outputId": "c43c5aa7-b6f3-4fe0-f99a-6b1b5249d551"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Most common products:\n",
            "Description\n",
            "WHITE HANGING HEART T-LIGHT HOLDER    2016\n",
            "REGENCY CAKESTAND 3 TIER              1713\n",
            "JUMBO BAG RED RETROSPOT               1615\n",
            "ASSORTED COLOUR BIRD ORNAMENT         1395\n",
            "PARTY BUNTING                         1389\n",
            "LUNCH BAG RED RETROSPOT               1303\n",
            "SET OF 3 CAKE TINS PANTRY DESIGN      1152\n",
            "POSTAGE                               1099\n",
            "LUNCH BAG  BLACK SKULL.               1078\n",
            "PACK OF 72 RETROSPOT CAKE CASES       1050\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "print(f\"Most common products:\\n{df['Description'].value_counts().head(10)}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n0sSDvWCo7sA"
      },
      "source": [
        "### Distribution of Qty"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "ity6dJl3o7sB",
        "outputId": "eb9eb4cf-bf29-4115-8f7d-1ab52a8ae205"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Define custom bin ranges\n",
        "bin_ranges = list(range(0, 1001, 50))  # Bins from 0 to 1000 in increments of 50\n",
        "\n",
        "# Plot histogram with custom bins\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.histplot(df['Quantity'], bins=bin_ranges, kde=False)\n",
        "plt.title('Distribution of Quantity (Custom Bins)')\n",
        "plt.xlabel('Quantity')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 414
        },
        "id": "wE9X77Qno7sB",
        "outputId": "a54f8cda-8ca8-4996-bda4-8312130fd327"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Apply log transformation to Quantity\n",
        "df['Log_Quantity'] = df['Quantity'].apply(lambda x: np.log1p(x) if x > 0 else 0)\n",
        "\n",
        "# Plot histogram of log-transformed data\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.histplot(df['Log_Quantity'], bins=50, kde=True)\n",
        "plt.title('Distribution of Log-Transformed Quantity')\n",
        "plt.xlabel('Log(Quantity)')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0R5u4t1ho7sC"
      },
      "source": [
        "### Distribution of Transaction"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "zVI9OF3Fo7sC",
        "outputId": "209b2574-ca29-43bb-8271-1ee6394b5caa"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "df['YearMonth'] = df['InvoiceDate'].dt.to_period('M')\n",
        "\n",
        "plt.figure(figsize=(15, 6))\n",
        "df['YearMonth'].value_counts().sort_index().plot(kind='bar')\n",
        "plt.title('Transactions Over Time')\n",
        "plt.xlabel('Year-Month')\n",
        "plt.ylabel('Number of Transactions')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "41p2M5nIo7sC"
      },
      "source": [
        "### Customer location"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 712
        },
        "id": "NftLzedOo7sC",
        "outputId": "ff65e13b-f5d8-48df-9a07-e6e485c259ca"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Country Analysis:\n",
            "Number of unique countries: 37\n",
            "Top 10 countries by transactions:\n",
            "Country\n",
            "United Kingdom    349203\n",
            "Germany             9025\n",
            "France              8326\n",
            "EIRE                7226\n",
            "Spain               2479\n",
            "Netherlands         2359\n",
            "Belgium             2031\n",
            "Switzerland         1841\n",
            "Portugal            1453\n",
            "Australia           1181\n",
            "Name: count, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "print(\"\\nCountry Analysis:\")\n",
        "print(f\"Number of unique countries: {df['Country'].nunique()}\")\n",
        "print(f\"Top 10 countries by transactions:\\n{df['Country'].value_counts().head(10)}\")\n",
        "\n",
        "# Transactions by country\n",
        "plt.figure(figsize=(15, 8))\n",
        "df['Country'].value_counts().plot(kind='bar')\n",
        "plt.title('Transactions by Country')\n",
        "plt.ylabel('Number of Transactions')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZQlyxOu9o7sD"
      },
      "source": [
        "## Cohort Analysis\n",
        "- Cohort group: 고객의 첫번째 구매 날짜"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dnaPASj6o7sE"
      },
      "outputs": [],
      "source": [
        "df1 = df.copy()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7PQ9eL27o7sE"
      },
      "outputs": [],
      "source": [
        "### Get Month\n",
        "df1['InvoiceMonth'] = df1['InvoiceDate'].dt.date"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 417
        },
        "id": "8uQ6-moto7sE",
        "outputId": "f7b11bde-3e8f-4033-82d3-e830f77a82db"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       InvoiceNo StockCode                      Description  Quantity  \\\n",
              "541904    581587     22613      PACK OF 20 SPACEBOY NAPKINS        12   \n",
              "541905    581587     22899     CHILDREN'S APRON DOLLY GIRL          6   \n",
              "541906    581587     23254    CHILDRENS CUTLERY DOLLY GIRL          4   \n",
              "541907    581587     23255  CHILDRENS CUTLERY CIRCUS PARADE         4   \n",
              "541908    581587     22138    BAKING SET 9 PIECE RETROSPOT          3   \n",
              "\n",
              "               InvoiceDate  UnitPrice CustomerID Country  Log_Quantity  \\\n",
              "541904 2011-12-09 12:50:00       0.85      12680  France      2.564949   \n",
              "541905 2011-12-09 12:50:00       2.10      12680  France      1.945910   \n",
              "541906 2011-12-09 12:50:00       4.15      12680  France      1.609438   \n",
              "541907 2011-12-09 12:50:00       4.15      12680  France      1.609438   \n",
              "541908 2011-12-09 12:50:00       4.95      12680  France      1.386294   \n",
              "\n",
              "       YearMonth InvoiceMonth  \n",
              "541904   2011-12   2011-12-09  \n",
              "541905   2011-12   2011-12-09  \n",
              "541906   2011-12   2011-12-09  \n",
              "541907   2011-12   2011-12-09  \n",
              "541908   2011-12   2011-12-09  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e3dd32cc-15b0-4dd4-b27a-6c122a7d10ed\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>InvoiceNo</th>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>UnitPrice</th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Country</th>\n",
              "      <th>Log_Quantity</th>\n",
              "      <th>YearMonth</th>\n",
              "      <th>InvoiceMonth</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>541904</th>\n",
              "      <td>581587</td>\n",
              "      <td>22613</td>\n",
              "      <td>PACK OF 20 SPACEBOY NAPKINS</td>\n",
              "      <td>12</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>0.85</td>\n",
              "      <td>12680</td>\n",
              "      <td>France</td>\n",
              "      <td>2.564949</td>\n",
              "      <td>2011-12</td>\n",
              "      <td>2011-12-09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541905</th>\n",
              "      <td>581587</td>\n",
              "      <td>22899</td>\n",
              "      <td>CHILDREN'S APRON DOLLY GIRL</td>\n",
              "      <td>6</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>2.10</td>\n",
              "      <td>12680</td>\n",
              "      <td>France</td>\n",
              "      <td>1.945910</td>\n",
              "      <td>2011-12</td>\n",
              "      <td>2011-12-09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541906</th>\n",
              "      <td>581587</td>\n",
              "      <td>23254</td>\n",
              "      <td>CHILDRENS CUTLERY DOLLY GIRL</td>\n",
              "      <td>4</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>4.15</td>\n",
              "      <td>12680</td>\n",
              "      <td>France</td>\n",
              "      <td>1.609438</td>\n",
              "      <td>2011-12</td>\n",
              "      <td>2011-12-09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541907</th>\n",
              "      <td>581587</td>\n",
              "      <td>23255</td>\n",
              "      <td>CHILDRENS CUTLERY CIRCUS PARADE</td>\n",
              "      <td>4</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>4.15</td>\n",
              "      <td>12680</td>\n",
              "      <td>France</td>\n",
              "      <td>1.609438</td>\n",
              "      <td>2011-12</td>\n",
              "      <td>2011-12-09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541908</th>\n",
              "      <td>581587</td>\n",
              "      <td>22138</td>\n",
              "      <td>BAKING SET 9 PIECE RETROSPOT</td>\n",
              "      <td>3</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>4.95</td>\n",
              "      <td>12680</td>\n",
              "      <td>France</td>\n",
              "      <td>1.386294</td>\n",
              "      <td>2011-12</td>\n",
              "      <td>2011-12-09</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e3dd32cc-15b0-4dd4-b27a-6c122a7d10ed')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e3dd32cc-15b0-4dd4-b27a-6c122a7d10ed button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e3dd32cc-15b0-4dd4-b27a-6c122a7d10ed');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-55915ed7-79ac-42e1-8549-9042ac256c66\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-55915ed7-79ac-42e1-8549-9042ac256c66')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-55915ed7-79ac-42e1-8549-9042ac256c66 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 60
        }
      ],
      "source": [
        "df1.tail()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DBseyRPEo7sF"
      },
      "source": [
        "#### Cohort Month: 고객의 첫 구매 날짜"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-R2cGSdwo7sF"
      },
      "outputs": [],
      "source": [
        "### Get Cohort Month\n",
        "df1['FirstOrderDate'] = df1.groupby('CustomerID')['InvoiceMonth'].transform('min')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 434
        },
        "id": "-w3BiDIAo7sG",
        "outputId": "04fa144b-916e-438b-83fb-cd8fe92d7234"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  InvoiceNo StockCode                          Description  Quantity  \\\n",
              "0    536365    85123A   WHITE HANGING HEART T-LIGHT HOLDER         6   \n",
              "1    536365     71053                  WHITE METAL LANTERN         6   \n",
              "2    536365    84406B       CREAM CUPID HEARTS COAT HANGER         8   \n",
              "3    536365    84029G  KNITTED UNION FLAG HOT WATER BOTTLE         6   \n",
              "4    536365    84029E       RED WOOLLY HOTTIE WHITE HEART.         6   \n",
              "\n",
              "          InvoiceDate  UnitPrice CustomerID         Country  Log_Quantity  \\\n",
              "0 2010-12-01 08:26:00       2.55      17850  United Kingdom      1.945910   \n",
              "1 2010-12-01 08:26:00       3.39      17850  United Kingdom      1.945910   \n",
              "2 2010-12-01 08:26:00       2.75      17850  United Kingdom      2.197225   \n",
              "3 2010-12-01 08:26:00       3.39      17850  United Kingdom      1.945910   \n",
              "4 2010-12-01 08:26:00       3.39      17850  United Kingdom      1.945910   \n",
              "\n",
              "  YearMonth InvoiceMonth FirstOrderDate  \n",
              "0   2010-12   2010-12-01     2010-12-01  \n",
              "1   2010-12   2010-12-01     2010-12-01  \n",
              "2   2010-12   2010-12-01     2010-12-01  \n",
              "3   2010-12   2010-12-01     2010-12-01  \n",
              "4   2010-12   2010-12-01     2010-12-01  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-85588afb-f0ec-4023-ab24-dbb43bde32e1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>InvoiceNo</th>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>UnitPrice</th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Country</th>\n",
              "      <th>Log_Quantity</th>\n",
              "      <th>YearMonth</th>\n",
              "      <th>InvoiceMonth</th>\n",
              "      <th>FirstOrderDate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>536365</td>\n",
              "      <td>85123A</td>\n",
              "      <td>WHITE HANGING HEART T-LIGHT HOLDER</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>2.55</td>\n",
              "      <td>17850</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>1.945910</td>\n",
              "      <td>2010-12</td>\n",
              "      <td>2010-12-01</td>\n",
              "      <td>2010-12-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>536365</td>\n",
              "      <td>71053</td>\n",
              "      <td>WHITE METAL LANTERN</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>1.945910</td>\n",
              "      <td>2010-12</td>\n",
              "      <td>2010-12-01</td>\n",
              "      <td>2010-12-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>536365</td>\n",
              "      <td>84406B</td>\n",
              "      <td>CREAM CUPID HEARTS COAT HANGER</td>\n",
              "      <td>8</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>2.75</td>\n",
              "      <td>17850</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>2.197225</td>\n",
              "      <td>2010-12</td>\n",
              "      <td>2010-12-01</td>\n",
              "      <td>2010-12-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029G</td>\n",
              "      <td>KNITTED UNION FLAG HOT WATER BOTTLE</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>1.945910</td>\n",
              "      <td>2010-12</td>\n",
              "      <td>2010-12-01</td>\n",
              "      <td>2010-12-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029E</td>\n",
              "      <td>RED WOOLLY HOTTIE WHITE HEART.</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>1.945910</td>\n",
              "      <td>2010-12</td>\n",
              "      <td>2010-12-01</td>\n",
              "      <td>2010-12-01</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-85588afb-f0ec-4023-ab24-dbb43bde32e1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-85588afb-f0ec-4023-ab24-dbb43bde32e1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-85588afb-f0ec-4023-ab24-dbb43bde32e1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2fc41459-2cbe-4b35-bb17-adcfd1849cb7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2fc41459-2cbe-4b35-bb17-adcfd1849cb7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2fc41459-2cbe-4b35-bb17-adcfd1849cb7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df1"
            }
          },
          "metadata": {},
          "execution_count": 62
        }
      ],
      "source": [
        "df1.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 417
        },
        "id": "siI0-inLo7sG",
        "outputId": "8cc124dc-5acc-4773-e070-2585e1f18d4e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       InvoiceNo StockCode                      Description  Quantity  \\\n",
              "541904    581587     22613      PACK OF 20 SPACEBOY NAPKINS        12   \n",
              "541905    581587     22899     CHILDREN'S APRON DOLLY GIRL          6   \n",
              "541906    581587     23254    CHILDRENS CUTLERY DOLLY GIRL          4   \n",
              "541907    581587     23255  CHILDRENS CUTLERY CIRCUS PARADE         4   \n",
              "541908    581587     22138    BAKING SET 9 PIECE RETROSPOT          3   \n",
              "\n",
              "               InvoiceDate  UnitPrice CustomerID Country  Log_Quantity  \\\n",
              "541904 2011-12-09 12:50:00       0.85      12680  France      2.564949   \n",
              "541905 2011-12-09 12:50:00       2.10      12680  France      1.945910   \n",
              "541906 2011-12-09 12:50:00       4.15      12680  France      1.609438   \n",
              "541907 2011-12-09 12:50:00       4.15      12680  France      1.609438   \n",
              "541908 2011-12-09 12:50:00       4.95      12680  France      1.386294   \n",
              "\n",
              "       YearMonth InvoiceMonth FirstOrderDate  \n",
              "541904   2011-12   2011-12-09     2011-08-18  \n",
              "541905   2011-12   2011-12-09     2011-08-18  \n",
              "541906   2011-12   2011-12-09     2011-08-18  \n",
              "541907   2011-12   2011-12-09     2011-08-18  \n",
              "541908   2011-12   2011-12-09     2011-08-18  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-263411e3-c627-4fb4-8203-4538d14204bf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>InvoiceNo</th>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>UnitPrice</th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Country</th>\n",
              "      <th>Log_Quantity</th>\n",
              "      <th>YearMonth</th>\n",
              "      <th>InvoiceMonth</th>\n",
              "      <th>FirstOrderDate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>541904</th>\n",
              "      <td>581587</td>\n",
              "      <td>22613</td>\n",
              "      <td>PACK OF 20 SPACEBOY NAPKINS</td>\n",
              "      <td>12</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>0.85</td>\n",
              "      <td>12680</td>\n",
              "      <td>France</td>\n",
              "      <td>2.564949</td>\n",
              "      <td>2011-12</td>\n",
              "      <td>2011-12-09</td>\n",
              "      <td>2011-08-18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541905</th>\n",
              "      <td>581587</td>\n",
              "      <td>22899</td>\n",
              "      <td>CHILDREN'S APRON DOLLY GIRL</td>\n",
              "      <td>6</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>2.10</td>\n",
              "      <td>12680</td>\n",
              "      <td>France</td>\n",
              "      <td>1.945910</td>\n",
              "      <td>2011-12</td>\n",
              "      <td>2011-12-09</td>\n",
              "      <td>2011-08-18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541906</th>\n",
              "      <td>581587</td>\n",
              "      <td>23254</td>\n",
              "      <td>CHILDRENS CUTLERY DOLLY GIRL</td>\n",
              "      <td>4</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>4.15</td>\n",
              "      <td>12680</td>\n",
              "      <td>France</td>\n",
              "      <td>1.609438</td>\n",
              "      <td>2011-12</td>\n",
              "      <td>2011-12-09</td>\n",
              "      <td>2011-08-18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541907</th>\n",
              "      <td>581587</td>\n",
              "      <td>23255</td>\n",
              "      <td>CHILDRENS CUTLERY CIRCUS PARADE</td>\n",
              "      <td>4</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>4.15</td>\n",
              "      <td>12680</td>\n",
              "      <td>France</td>\n",
              "      <td>1.609438</td>\n",
              "      <td>2011-12</td>\n",
              "      <td>2011-12-09</td>\n",
              "      <td>2011-08-18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541908</th>\n",
              "      <td>581587</td>\n",
              "      <td>22138</td>\n",
              "      <td>BAKING SET 9 PIECE RETROSPOT</td>\n",
              "      <td>3</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>4.95</td>\n",
              "      <td>12680</td>\n",
              "      <td>France</td>\n",
              "      <td>1.386294</td>\n",
              "      <td>2011-12</td>\n",
              "      <td>2011-12-09</td>\n",
              "      <td>2011-08-18</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-263411e3-c627-4fb4-8203-4538d14204bf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-263411e3-c627-4fb4-8203-4538d14204bf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-263411e3-c627-4fb4-8203-4538d14204bf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4037821c-07e9-496d-acd7-a050cbc549a6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4037821c-07e9-496d-acd7-a050cbc549a6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4037821c-07e9-496d-acd7-a050cbc549a6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 63
        }
      ],
      "source": [
        "df1.tail()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "-fQKcTPro7sG",
        "outputId": "1bcb35c0-8873-4d48-9e56-9f8937e5516a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "InvoiceMonth  FirstOrderDate\n",
              "2011-08-18    2011-08-18        20\n",
              "2011-12-09    2011-08-18        15\n",
              "2011-09-27    2011-08-18        10\n",
              "2011-09-11    2011-08-18         7\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>InvoiceMonth</th>\n",
              "      <th>FirstOrderDate</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2011-08-18</th>\n",
              "      <th>2011-08-18</th>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-12-09</th>\n",
              "      <th>2011-08-18</th>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-09-27</th>\n",
              "      <th>2011-08-18</th>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-09-11</th>\n",
              "      <th>2011-08-18</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ],
      "source": [
        "## Check value\n",
        "df1[df1['CustomerID'] == '12680'][['InvoiceMonth', 'FirstOrderDate']].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "9IXvC8HBo7sH",
        "outputId": "245ae59c-227b-477e-c2d1-1a24b0de231d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "InvoiceMonth  FirstOrderDate\n",
              "2010-12-02    2010-12-01        213\n",
              "2010-12-01    2010-12-01         84\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>InvoiceMonth</th>\n",
              "      <th>FirstOrderDate</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2010-12-02</th>\n",
              "      <th>2010-12-01</th>\n",
              "      <td>213</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010-12-01</th>\n",
              "      <th>2010-12-01</th>\n",
              "      <td>84</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ],
      "source": [
        "df1[df1['CustomerID'] == '17850'][['InvoiceMonth', 'FirstOrderDate']].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "y_0ybTxOo7sH",
        "outputId": "4ebd3dc9-94d6-4e1c-9318-bec2cf712bd1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "InvoiceNo                 object\n",
              "StockCode                 object\n",
              "Description               object\n",
              "Quantity                   int64\n",
              "InvoiceDate       datetime64[ns]\n",
              "UnitPrice                float64\n",
              "CustomerID                object\n",
              "Country                   object\n",
              "Log_Quantity             float64\n",
              "YearMonth              period[M]\n",
              "InvoiceMonth              object\n",
              "FirstOrderDate            object\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>InvoiceNo</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>StockCode</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Description</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Quantity</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>InvoiceDate</th>\n",
              "      <td>datetime64[ns]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>UnitPrice</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CustomerID</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Country</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Log_Quantity</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>YearMonth</th>\n",
              "      <td>period[M]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>InvoiceMonth</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FirstOrderDate</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ],
      "source": [
        "df1.dtypes"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fZtbxpPho7sH"
      },
      "source": [
        "### Cohort Index\n",
        "- 각 코호트의 월별 활성과 고객수를 계산"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EjjIZDZio7sH"
      },
      "outputs": [],
      "source": [
        "### Change FirstOrderDate to dataframe dtype\n",
        "df1['InvoiceMonth'] = pd.to_datetime(df1['InvoiceMonth'])\n",
        "df1['FirstOrderDate'] = pd.to_datetime(df1['FirstOrderDate'])\n",
        "# 월의 첫째날 가져오기\n",
        "df1['InvoiceMonth'] = df1['InvoiceDate'].dt.to_period('M').dt.to_timestamp()\n",
        "df1['FirstOrderDate'] = df1['FirstOrderDate'].dt.to_period('M').dt.to_timestamp()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "9JnQqgC9o7sI",
        "outputId": "91789e94-005b-452c-a6ff-3ab7185daaf2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "InvoiceNo                 object\n",
              "StockCode                 object\n",
              "Description               object\n",
              "Quantity                   int64\n",
              "InvoiceDate       datetime64[ns]\n",
              "UnitPrice                float64\n",
              "CustomerID                object\n",
              "Country                   object\n",
              "Log_Quantity             float64\n",
              "YearMonth              period[M]\n",
              "InvoiceMonth      datetime64[ns]\n",
              "FirstOrderDate    datetime64[ns]\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>InvoiceNo</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>StockCode</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Description</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Quantity</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>InvoiceDate</th>\n",
              "      <td>datetime64[ns]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>UnitPrice</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CustomerID</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Country</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Log_Quantity</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>YearMonth</th>\n",
              "      <td>period[M]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>InvoiceMonth</th>\n",
              "      <td>datetime64[ns]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FirstOrderDate</th>\n",
              "      <td>datetime64[ns]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ],
      "source": [
        "df1.dtypes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 523
        },
        "id": "HXENpCQso7sI",
        "outputId": "768288f1-63a3-40c9-8c6b-0048a37aa16d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "FirstOrderDate\n",
              "2010-12-01    167209\n",
              "2011-01-01     47144\n",
              "2011-03-01     33929\n",
              "2011-02-01     30156\n",
              "2011-04-01     19025\n",
              "2011-10-01     15868\n",
              "2011-05-01     15474\n",
              "2011-09-01     14031\n",
              "2011-06-01     13668\n",
              "2011-08-01     12940\n",
              "2011-11-01     11921\n",
              "2011-07-01     10366\n",
              "2011-12-01       961\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FirstOrderDate</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2010-12-01</th>\n",
              "      <td>167209</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01</th>\n",
              "      <td>47144</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-03-01</th>\n",
              "      <td>33929</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-02-01</th>\n",
              "      <td>30156</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-04-01</th>\n",
              "      <td>19025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-10-01</th>\n",
              "      <td>15868</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-05-01</th>\n",
              "      <td>15474</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-09-01</th>\n",
              "      <td>14031</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-06-01</th>\n",
              "      <td>13668</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-08-01</th>\n",
              "      <td>12940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-11-01</th>\n",
              "      <td>11921</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-07-01</th>\n",
              "      <td>10366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-12-01</th>\n",
              "      <td>961</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ],
      "source": [
        "df1['FirstOrderDate'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 523
        },
        "id": "FC58r9LWo7sJ",
        "outputId": "e23542f4-8754-4726-d08c-b85f84730b4f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "FirstOrderDate\n",
              "2010-12-01        167209\n",
              "2011-01-01         47144\n",
              "2011-03-01         33929\n",
              "2011-02-01         30156\n",
              "2011-04-01         19025\n",
              "2011-10-01         15868\n",
              "2011-05-01         15474\n",
              "2011-09-01         14031\n",
              "2011-06-01         13668\n",
              "2011-08-01         12940\n",
              "2011-11-01         11921\n",
              "2011-07-01         10366\n",
              "2011-12-01           961\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FirstOrderDate</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2010-12-01</th>\n",
              "      <td>167209</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01</th>\n",
              "      <td>47144</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-03-01</th>\n",
              "      <td>33929</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-02-01</th>\n",
              "      <td>30156</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-04-01</th>\n",
              "      <td>19025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-10-01</th>\n",
              "      <td>15868</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-05-01</th>\n",
              "      <td>15474</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-09-01</th>\n",
              "      <td>14031</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-06-01</th>\n",
              "      <td>13668</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-08-01</th>\n",
              "      <td>12940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-11-01</th>\n",
              "      <td>11921</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-07-01</th>\n",
              "      <td>10366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-12-01</th>\n",
              "      <td>961</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ],
      "source": [
        "df1[['FirstOrderDate']].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 492
        },
        "id": "ZJWNLI4io7sJ",
        "outputId": "71dcba26-0e60-4e9d-9c39-8faaac0e5063"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "FirstOrderDate  InvoiceMonth\n",
              "2011-01-01      2011-01-01      10877\n",
              "                2011-11-01       6248\n",
              "                2011-10-01       4987\n",
              "                2011-09-01       3768\n",
              "                2011-05-01       3603\n",
              "                2011-06-01       3214\n",
              "                2011-03-01       3012\n",
              "                2011-08-01       2844\n",
              "                2011-07-01       2776\n",
              "                2011-04-01       2290\n",
              "                2011-02-01       2191\n",
              "                2011-12-01       1334\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FirstOrderDate</th>\n",
              "      <th>InvoiceMonth</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"12\" valign=\"top\">2011-01-01</th>\n",
              "      <th>2011-01-01</th>\n",
              "      <td>10877</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-11-01</th>\n",
              "      <td>6248</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-10-01</th>\n",
              "      <td>4987</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-09-01</th>\n",
              "      <td>3768</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-05-01</th>\n",
              "      <td>3603</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-06-01</th>\n",
              "      <td>3214</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-03-01</th>\n",
              "      <td>3012</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-08-01</th>\n",
              "      <td>2844</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-07-01</th>\n",
              "      <td>2776</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-04-01</th>\n",
              "      <td>2290</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-02-01</th>\n",
              "      <td>2191</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-12-01</th>\n",
              "      <td>1334</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ],
      "source": [
        "df1[df1['FirstOrderDate'] == '2011-01-01'][['FirstOrderDate','InvoiceMonth']].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "veYqAh1qo7sJ"
      },
      "outputs": [],
      "source": [
        "df1['CohortIndex'] = (\n",
        "    (df1['InvoiceMonth'].dt.year - df1['FirstOrderDate'].dt.year) * 12 +\n",
        "    (df1['InvoiceMonth'].dt.month - df1['FirstOrderDate'].dt.month) #+ 1\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 434
        },
        "id": "Z7HmSmK5o7sJ",
        "outputId": "8e16253f-9cbf-444e-95bb-9e933ba20573"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  InvoiceNo StockCode                          Description  Quantity  \\\n",
              "0    536365    85123A   WHITE HANGING HEART T-LIGHT HOLDER         6   \n",
              "1    536365     71053                  WHITE METAL LANTERN         6   \n",
              "2    536365    84406B       CREAM CUPID HEARTS COAT HANGER         8   \n",
              "3    536365    84029G  KNITTED UNION FLAG HOT WATER BOTTLE         6   \n",
              "4    536365    84029E       RED WOOLLY HOTTIE WHITE HEART.         6   \n",
              "\n",
              "          InvoiceDate  UnitPrice CustomerID         Country  Log_Quantity  \\\n",
              "0 2010-12-01 08:26:00       2.55      17850  United Kingdom      1.945910   \n",
              "1 2010-12-01 08:26:00       3.39      17850  United Kingdom      1.945910   \n",
              "2 2010-12-01 08:26:00       2.75      17850  United Kingdom      2.197225   \n",
              "3 2010-12-01 08:26:00       3.39      17850  United Kingdom      1.945910   \n",
              "4 2010-12-01 08:26:00       3.39      17850  United Kingdom      1.945910   \n",
              "\n",
              "  YearMonth InvoiceMonth FirstOrderDate  CohortIndex  \n",
              "0   2010-12   2010-12-01     2010-12-01            0  \n",
              "1   2010-12   2010-12-01     2010-12-01            0  \n",
              "2   2010-12   2010-12-01     2010-12-01            0  \n",
              "3   2010-12   2010-12-01     2010-12-01            0  \n",
              "4   2010-12   2010-12-01     2010-12-01            0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7c176b2d-7c73-4556-8137-fc1796ed53f4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>InvoiceNo</th>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>UnitPrice</th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Country</th>\n",
              "      <th>Log_Quantity</th>\n",
              "      <th>YearMonth</th>\n",
              "      <th>InvoiceMonth</th>\n",
              "      <th>FirstOrderDate</th>\n",
              "      <th>CohortIndex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>536365</td>\n",
              "      <td>85123A</td>\n",
              "      <td>WHITE HANGING HEART T-LIGHT HOLDER</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>2.55</td>\n",
              "      <td>17850</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>1.945910</td>\n",
              "      <td>2010-12</td>\n",
              "      <td>2010-12-01</td>\n",
              "      <td>2010-12-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>536365</td>\n",
              "      <td>71053</td>\n",
              "      <td>WHITE METAL LANTERN</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>1.945910</td>\n",
              "      <td>2010-12</td>\n",
              "      <td>2010-12-01</td>\n",
              "      <td>2010-12-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>536365</td>\n",
              "      <td>84406B</td>\n",
              "      <td>CREAM CUPID HEARTS COAT HANGER</td>\n",
              "      <td>8</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>2.75</td>\n",
              "      <td>17850</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>2.197225</td>\n",
              "      <td>2010-12</td>\n",
              "      <td>2010-12-01</td>\n",
              "      <td>2010-12-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029G</td>\n",
              "      <td>KNITTED UNION FLAG HOT WATER BOTTLE</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>1.945910</td>\n",
              "      <td>2010-12</td>\n",
              "      <td>2010-12-01</td>\n",
              "      <td>2010-12-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029E</td>\n",
              "      <td>RED WOOLLY HOTTIE WHITE HEART.</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>1.945910</td>\n",
              "      <td>2010-12</td>\n",
              "      <td>2010-12-01</td>\n",
              "      <td>2010-12-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7c176b2d-7c73-4556-8137-fc1796ed53f4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7c176b2d-7c73-4556-8137-fc1796ed53f4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7c176b2d-7c73-4556-8137-fc1796ed53f4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-91b34b0d-0d0e-48e8-b68e-5b5955b63665\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-91b34b0d-0d0e-48e8-b68e-5b5955b63665')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-91b34b0d-0d0e-48e8-b68e-5b5955b63665 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df1"
            }
          },
          "metadata": {},
          "execution_count": 73
        }
      ],
      "source": [
        "df1.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "FNJHdV7Jo7sK",
        "outputId": "abd9bac7-4f40-407c-91d4-e2778dc7d644"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       InvoiceMonth FirstOrderDate  CohortIndex\n",
              "305779   2011-08-01     2011-08-01            0\n",
              "305780   2011-08-01     2011-08-01            0\n",
              "305781   2011-08-01     2011-08-01            0\n",
              "305782   2011-08-01     2011-08-01            0\n",
              "305783   2011-08-01     2011-08-01            0\n",
              "305784   2011-08-01     2011-08-01            0\n",
              "305785   2011-08-01     2011-08-01            0\n",
              "305786   2011-08-01     2011-08-01            0\n",
              "305787   2011-08-01     2011-08-01            0\n",
              "305788   2011-08-01     2011-08-01            0\n",
              "305789   2011-08-01     2011-08-01            0\n",
              "305790   2011-08-01     2011-08-01            0\n",
              "305791   2011-08-01     2011-08-01            0\n",
              "305792   2011-08-01     2011-08-01            0\n",
              "305793   2011-08-01     2011-08-01            0\n",
              "305794   2011-08-01     2011-08-01            0\n",
              "305795   2011-08-01     2011-08-01            0\n",
              "305796   2011-08-01     2011-08-01            0\n",
              "305797   2011-08-01     2011-08-01            0\n",
              "305798   2011-08-01     2011-08-01            0\n",
              "334493   2011-09-01     2011-08-01            1\n",
              "334494   2011-09-01     2011-08-01            1\n",
              "334495   2011-09-01     2011-08-01            1\n",
              "334496   2011-09-01     2011-08-01            1\n",
              "334497   2011-09-01     2011-08-01            1\n",
              "334498   2011-09-01     2011-08-01            1\n",
              "334499   2011-09-01     2011-08-01            1\n",
              "362780   2011-09-01     2011-08-01            1\n",
              "362781   2011-09-01     2011-08-01            1\n",
              "362782   2011-09-01     2011-08-01            1\n",
              "362783   2011-09-01     2011-08-01            1\n",
              "362784   2011-09-01     2011-08-01            1\n",
              "362785   2011-09-01     2011-08-01            1\n",
              "362786   2011-09-01     2011-08-01            1\n",
              "362787   2011-09-01     2011-08-01            1\n",
              "362788   2011-09-01     2011-08-01            1\n",
              "362789   2011-09-01     2011-08-01            1\n",
              "541894   2011-12-01     2011-08-01            4\n",
              "541895   2011-12-01     2011-08-01            4\n",
              "541896   2011-12-01     2011-08-01            4\n",
              "541897   2011-12-01     2011-08-01            4\n",
              "541898   2011-12-01     2011-08-01            4\n",
              "541899   2011-12-01     2011-08-01            4\n",
              "541900   2011-12-01     2011-08-01            4\n",
              "541901   2011-12-01     2011-08-01            4\n",
              "541902   2011-12-01     2011-08-01            4\n",
              "541903   2011-12-01     2011-08-01            4\n",
              "541904   2011-12-01     2011-08-01            4\n",
              "541905   2011-12-01     2011-08-01            4\n",
              "541906   2011-12-01     2011-08-01            4\n",
              "541907   2011-12-01     2011-08-01            4\n",
              "541908   2011-12-01     2011-08-01            4"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b3e6f00c-9b80-4a8c-a5ea-cb1bbf9413f7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>InvoiceMonth</th>\n",
              "      <th>FirstOrderDate</th>\n",
              "      <th>CohortIndex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>305779</th>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>305780</th>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>305781</th>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>305782</th>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>305783</th>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>305784</th>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>305785</th>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>305786</th>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>305787</th>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>305788</th>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>305789</th>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>305790</th>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>305791</th>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>305792</th>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>305793</th>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>305794</th>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>305795</th>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>305796</th>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>305797</th>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>305798</th>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>334493</th>\n",
              "      <td>2011-09-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>334494</th>\n",
              "      <td>2011-09-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>334495</th>\n",
              "      <td>2011-09-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>334496</th>\n",
              "      <td>2011-09-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>334497</th>\n",
              "      <td>2011-09-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>334498</th>\n",
              "      <td>2011-09-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>334499</th>\n",
              "      <td>2011-09-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>362780</th>\n",
              "      <td>2011-09-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>362781</th>\n",
              "      <td>2011-09-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>362782</th>\n",
              "      <td>2011-09-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>362783</th>\n",
              "      <td>2011-09-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>362784</th>\n",
              "      <td>2011-09-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>362785</th>\n",
              "      <td>2011-09-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>362786</th>\n",
              "      <td>2011-09-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>362787</th>\n",
              "      <td>2011-09-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>362788</th>\n",
              "      <td>2011-09-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>362789</th>\n",
              "      <td>2011-09-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541894</th>\n",
              "      <td>2011-12-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541895</th>\n",
              "      <td>2011-12-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541896</th>\n",
              "      <td>2011-12-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541897</th>\n",
              "      <td>2011-12-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541898</th>\n",
              "      <td>2011-12-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541899</th>\n",
              "      <td>2011-12-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541900</th>\n",
              "      <td>2011-12-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541901</th>\n",
              "      <td>2011-12-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541902</th>\n",
              "      <td>2011-12-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541903</th>\n",
              "      <td>2011-12-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541904</th>\n",
              "      <td>2011-12-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541905</th>\n",
              "      <td>2011-12-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541906</th>\n",
              "      <td>2011-12-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541907</th>\n",
              "      <td>2011-12-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541908</th>\n",
              "      <td>2011-12-01</td>\n",
              "      <td>2011-08-01</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b3e6f00c-9b80-4a8c-a5ea-cb1bbf9413f7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b3e6f00c-9b80-4a8c-a5ea-cb1bbf9413f7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b3e6f00c-9b80-4a8c-a5ea-cb1bbf9413f7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7f21f54d-f1d0-4ef5-aa7b-fcdd30448338\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7f21f54d-f1d0-4ef5-aa7b-fcdd30448338')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7f21f54d-f1d0-4ef5-aa7b-fcdd30448338 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df1[df1['CustomerID'] == '12680'][['InvoiceMonth', 'FirstOrderDate','CohortIndex']]\",\n  \"rows\": 52,\n  \"fields\": [\n    {\n      \"column\": \"InvoiceMonth\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2011-08-01 00:00:00\",\n        \"max\": \"2011-12-01 00:00:00\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2011-08-01 00:00:00\",\n          \"2011-09-01 00:00:00\",\n          \"2011-12-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FirstOrderDate\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2011-08-01 00:00:00\",\n        \"max\": \"2011-08-01 00:00:00\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"2011-08-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CohortIndex\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 74
        }
      ],
      "source": [
        "df1[df1['CustomerID'] == '12680'][['InvoiceMonth', 'FirstOrderDate','CohortIndex']]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 338
        },
        "id": "_KSQS8F0o7sK",
        "outputId": "44fc1497-d0ba-410a-c063-baa35e45d4e2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Quantity                    InvoiceDate      UnitPrice  \\\n",
              "count  392692.000000                         392692  392692.000000   \n",
              "mean       13.119702  2011-07-10 19:13:07.771892480       3.125914   \n",
              "min         1.000000            2010-12-01 08:26:00       0.001000   \n",
              "25%         2.000000            2011-04-07 11:12:00       1.250000   \n",
              "50%         6.000000            2011-07-31 12:02:00       1.950000   \n",
              "75%        12.000000            2011-10-20 12:53:00       3.750000   \n",
              "max     80995.000000            2011-12-09 12:50:00    8142.750000   \n",
              "std       180.492832                            NaN      22.241836   \n",
              "\n",
              "        Log_Quantity                   InvoiceMonth  \\\n",
              "count  392692.000000                         392692   \n",
              "mean        1.929854  2011-06-26 04:55:07.630407680   \n",
              "min         0.693147            2010-12-01 00:00:00   \n",
              "25%         1.098612            2011-04-01 00:00:00   \n",
              "50%         1.945910            2011-07-01 00:00:00   \n",
              "75%         2.564949            2011-10-01 00:00:00   \n",
              "max        11.302155            2011-12-01 00:00:00   \n",
              "std         1.000779                            NaN   \n",
              "\n",
              "                      FirstOrderDate    CohortIndex  \n",
              "count                         392692  392692.000000  \n",
              "mean   2011-02-20 03:31:01.477188096       4.147599  \n",
              "min              2010-12-01 00:00:00       0.000000  \n",
              "25%              2010-12-01 00:00:00       0.000000  \n",
              "50%              2011-01-01 00:00:00       3.000000  \n",
              "75%              2011-04-01 00:00:00       7.000000  \n",
              "max              2011-12-01 00:00:00      12.000000  \n",
              "std                              NaN       3.850198  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-830af8f7-2eb0-4b09-b616-8b63847aedf4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>UnitPrice</th>\n",
              "      <th>Log_Quantity</th>\n",
              "      <th>InvoiceMonth</th>\n",
              "      <th>FirstOrderDate</th>\n",
              "      <th>CohortIndex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>392692.000000</td>\n",
              "      <td>392692</td>\n",
              "      <td>392692.000000</td>\n",
              "      <td>392692.000000</td>\n",
              "      <td>392692</td>\n",
              "      <td>392692</td>\n",
              "      <td>392692.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>13.119702</td>\n",
              "      <td>2011-07-10 19:13:07.771892480</td>\n",
              "      <td>3.125914</td>\n",
              "      <td>1.929854</td>\n",
              "      <td>2011-06-26 04:55:07.630407680</td>\n",
              "      <td>2011-02-20 03:31:01.477188096</td>\n",
              "      <td>4.147599</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>0.001000</td>\n",
              "      <td>0.693147</td>\n",
              "      <td>2010-12-01 00:00:00</td>\n",
              "      <td>2010-12-01 00:00:00</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2.000000</td>\n",
              "      <td>2011-04-07 11:12:00</td>\n",
              "      <td>1.250000</td>\n",
              "      <td>1.098612</td>\n",
              "      <td>2011-04-01 00:00:00</td>\n",
              "      <td>2010-12-01 00:00:00</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>6.000000</td>\n",
              "      <td>2011-07-31 12:02:00</td>\n",
              "      <td>1.950000</td>\n",
              "      <td>1.945910</td>\n",
              "      <td>2011-07-01 00:00:00</td>\n",
              "      <td>2011-01-01 00:00:00</td>\n",
              "      <td>3.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>12.000000</td>\n",
              "      <td>2011-10-20 12:53:00</td>\n",
              "      <td>3.750000</td>\n",
              "      <td>2.564949</td>\n",
              "      <td>2011-10-01 00:00:00</td>\n",
              "      <td>2011-04-01 00:00:00</td>\n",
              "      <td>7.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>80995.000000</td>\n",
              "      <td>2011-12-09 12:50:00</td>\n",
              "      <td>8142.750000</td>\n",
              "      <td>11.302155</td>\n",
              "      <td>2011-12-01 00:00:00</td>\n",
              "      <td>2011-12-01 00:00:00</td>\n",
              "      <td>12.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>180.492832</td>\n",
              "      <td>NaN</td>\n",
              "      <td>22.241836</td>\n",
              "      <td>1.000779</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.850198</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-830af8f7-2eb0-4b09-b616-8b63847aedf4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-830af8f7-2eb0-4b09-b616-8b63847aedf4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-830af8f7-2eb0-4b09-b616-8b63847aedf4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a6c1c2f9-1658-4190-ae01-c1be7c8d1904\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a6c1c2f9-1658-4190-ae01-c1be7c8d1904')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a6c1c2f9-1658-4190-ae01-c1be7c8d1904 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df1\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 137682.02887632325,\n        \"min\": 1.0,\n        \"max\": 392692.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13.1197019547126,\n          12.0,\n          392692.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InvoiceDate\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1970-01-01 00:00:00.000392692\",\n        \"max\": \"2011-12-09 12:50:00\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"392692\",\n          \"2011-07-10 19:13:07.771892480\",\n          \"2011-10-20 12:53:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"UnitPrice\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 138453.96909880062,\n        \"min\": 0.001,\n        \"max\": 392692.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.125913907082396,\n          3.75,\n          392692.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log_Quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 138836.55090752608,\n        \"min\": 0.6931471805599453,\n        \"max\": 392692.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.929854439910983,\n          2.5649493574615367,\n          392692.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InvoiceMonth\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1970-01-01 00:00:00.000392692\",\n        \"max\": \"2011-12-01 00:00:00\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"392692\",\n          \"2011-06-26 04:55:07.630407680\",\n          \"2011-10-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FirstOrderDate\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1970-01-01 00:00:00.000392692\",\n        \"max\": \"2011-12-01 00:00:00\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"392692\",\n          \"2011-02-20 03:31:01.477188096\",\n          \"2011-12-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CohortIndex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 138836.07299558047,\n        \"min\": 0.0,\n        \"max\": 392692.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          392692.0,\n          4.147599136218716,\n          12.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 75
        }
      ],
      "source": [
        "df1.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 508
        },
        "id": "W9FJO8IWo7sK",
        "outputId": "14a2fab6-4df8-4372-fc73-ffe072bd9415"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "CohortIndex        0      1      2      3      4      5      6      7      8   \\\n",
              "FirstOrderDate                                                                  \n",
              "2010-12-01      885.0  324.0  286.0  340.0  321.0  352.0  321.0  309.0  313.0   \n",
              "2011-01-01      417.0   92.0  111.0   96.0  134.0  120.0  103.0  101.0  125.0   \n",
              "2011-02-01      380.0   71.0   71.0  108.0  103.0   94.0   96.0  106.0   94.0   \n",
              "2011-03-01      452.0   68.0  114.0   90.0  101.0   76.0  121.0  104.0  126.0   \n",
              "2011-04-01      300.0   64.0   61.0   63.0   59.0   68.0   65.0   78.0   22.0   \n",
              "2011-05-01      284.0   54.0   49.0   49.0   59.0   66.0   75.0   27.0    NaN   \n",
              "2011-06-01      242.0   42.0   38.0   64.0   56.0   81.0   23.0    NaN    NaN   \n",
              "2011-07-01      188.0   34.0   39.0   42.0   51.0   21.0    NaN    NaN    NaN   \n",
              "2011-08-01      169.0   35.0   42.0   41.0   21.0    NaN    NaN    NaN    NaN   \n",
              "2011-09-01      299.0   70.0   90.0   34.0    NaN    NaN    NaN    NaN    NaN   \n",
              "2011-10-01      358.0   86.0   41.0    NaN    NaN    NaN    NaN    NaN    NaN   \n",
              "2011-11-01      323.0   36.0    NaN    NaN    NaN    NaN    NaN    NaN    NaN   \n",
              "2011-12-01       41.0    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN   \n",
              "\n",
              "CohortIndex        9      10     11     12  \n",
              "FirstOrderDate                              \n",
              "2010-12-01      350.0  331.0  445.0  235.0  \n",
              "2011-01-01      136.0  152.0   49.0    NaN  \n",
              "2011-02-01      116.0   26.0    NaN    NaN  \n",
              "2011-03-01       39.0    NaN    NaN    NaN  \n",
              "2011-04-01        NaN    NaN    NaN    NaN  \n",
              "2011-05-01        NaN    NaN    NaN    NaN  \n",
              "2011-06-01        NaN    NaN    NaN    NaN  \n",
              "2011-07-01        NaN    NaN    NaN    NaN  \n",
              "2011-08-01        NaN    NaN    NaN    NaN  \n",
              "2011-09-01        NaN    NaN    NaN    NaN  \n",
              "2011-10-01        NaN    NaN    NaN    NaN  \n",
              "2011-11-01        NaN    NaN    NaN    NaN  \n",
              "2011-12-01        NaN    NaN    NaN    NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-272e7f82-3552-47f7-b317-7019a06c0ab8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>CohortIndex</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>10</th>\n",
              "      <th>11</th>\n",
              "      <th>12</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FirstOrderDate</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2010-12-01</th>\n",
              "      <td>885.0</td>\n",
              "      <td>324.0</td>\n",
              "      <td>286.0</td>\n",
              "      <td>340.0</td>\n",
              "      <td>321.0</td>\n",
              "      <td>352.0</td>\n",
              "      <td>321.0</td>\n",
              "      <td>309.0</td>\n",
              "      <td>313.0</td>\n",
              "      <td>350.0</td>\n",
              "      <td>331.0</td>\n",
              "      <td>445.0</td>\n",
              "      <td>235.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01</th>\n",
              "      <td>417.0</td>\n",
              "      <td>92.0</td>\n",
              "      <td>111.0</td>\n",
              "      <td>96.0</td>\n",
              "      <td>134.0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>103.0</td>\n",
              "      <td>101.0</td>\n",
              "      <td>125.0</td>\n",
              "      <td>136.0</td>\n",
              "      <td>152.0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-02-01</th>\n",
              "      <td>380.0</td>\n",
              "      <td>71.0</td>\n",
              "      <td>71.0</td>\n",
              "      <td>108.0</td>\n",
              "      <td>103.0</td>\n",
              "      <td>94.0</td>\n",
              "      <td>96.0</td>\n",
              "      <td>106.0</td>\n",
              "      <td>94.0</td>\n",
              "      <td>116.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-03-01</th>\n",
              "      <td>452.0</td>\n",
              "      <td>68.0</td>\n",
              "      <td>114.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>101.0</td>\n",
              "      <td>76.0</td>\n",
              "      <td>121.0</td>\n",
              "      <td>104.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>39.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-04-01</th>\n",
              "      <td>300.0</td>\n",
              "      <td>64.0</td>\n",
              "      <td>61.0</td>\n",
              "      <td>63.0</td>\n",
              "      <td>59.0</td>\n",
              "      <td>68.0</td>\n",
              "      <td>65.0</td>\n",
              "      <td>78.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-05-01</th>\n",
              "      <td>284.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>59.0</td>\n",
              "      <td>66.0</td>\n",
              "      <td>75.0</td>\n",
              "      <td>27.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-06-01</th>\n",
              "      <td>242.0</td>\n",
              "      <td>42.0</td>\n",
              "      <td>38.0</td>\n",
              "      <td>64.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>81.0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-07-01</th>\n",
              "      <td>188.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>39.0</td>\n",
              "      <td>42.0</td>\n",
              "      <td>51.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-08-01</th>\n",
              "      <td>169.0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>42.0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-09-01</th>\n",
              "      <td>299.0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-10-01</th>\n",
              "      <td>358.0</td>\n",
              "      <td>86.0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-11-01</th>\n",
              "      <td>323.0</td>\n",
              "      <td>36.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-12-01</th>\n",
              "      <td>41.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-272e7f82-3552-47f7-b317-7019a06c0ab8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-272e7f82-3552-47f7-b317-7019a06c0ab8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-272e7f82-3552-47f7-b317-7019a06c0ab8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d628991a-9c5e-41db-9b66-5be7588de4c5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d628991a-9c5e-41db-9b66-5be7588de4c5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d628991a-9c5e-41db-9b66-5be7588de4c5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_f3a14f2c-a820-4f0b-ba04-129a60b1a057\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cohort_counts')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f3a14f2c-a820-4f0b-ba04-129a60b1a057 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('cohort_counts');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "cohort_counts",
              "summary": "{\n  \"name\": \"cohort_counts\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": \"FirstOrderDate\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-12-01 00:00:00\",\n        \"max\": \"2011-12-01 00:00:00\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"2011-11-01 00:00:00\",\n          \"2011-09-01 00:00:00\",\n          \"2010-12-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 198.94739028839786,\n        \"min\": 41.0,\n        \"max\": 885.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          323.0,\n          299.0,\n          885.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 78.8973249152839,\n        \"min\": 34.0,\n        \"max\": 324.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          86.0,\n          70.0,\n          324.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 2,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 72.19179001420137,\n        \"min\": 38.0,\n        \"max\": 286.0,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          49.0,\n          286.0,\n          90.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 3,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 90.50113565892728,\n        \"min\": 34.0,\n        \"max\": 340.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          41.0,\n          96.0,\n          49.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 4,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 89.40373469703478,\n        \"min\": 21.0,\n        \"max\": 321.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          134.0,\n          56.0,\n          321.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 5,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 101.79636535751166,\n        \"min\": 21.0,\n        \"max\": 352.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          120.0,\n          66.0,\n          352.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 6,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 96.21231482408852,\n        \"min\": 23.0,\n        \"max\": 321.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          321.0,\n          103.0,\n          75.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 7,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 96.8946162935107,\n        \"min\": 27.0,\n        \"max\": 309.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          309.0,\n          101.0,\n          27.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 8,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 107.5987918147783,\n        \"min\": 22.0,\n        \"max\": 313.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          125.0,\n          22.0,\n          94.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 9,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 133.23256608902594,\n        \"min\": 39.0,\n        \"max\": 350.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          136.0,\n          39.0,\n          350.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 10,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 153.26556473433078,\n        \"min\": 26.0,\n        \"max\": 331.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          331.0,\n          152.0,\n          26.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 11,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 280.0142853498728,\n        \"min\": 49.0,\n        \"max\": 445.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          49.0,\n          445.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 12,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 235.0,\n        \"max\": 235.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          235.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 76
        }
      ],
      "source": [
        "cohort_counts = (\n",
        "    df1.groupby(['FirstOrderDate', 'CohortIndex'])['CustomerID']\n",
        "    .nunique() #각 그룹의 고유 고객 수(CustomerID)를 직접 계산)\n",
        "    .unstack() #Reshapes the grouped data into a pivot table\n",
        ")\n",
        "cohort_counts\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 347
        },
        "id": "6Y4zK4geo7sL",
        "outputId": "c5299c3d-413e-43da-b2fe-49ccaf1effd2"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(15, 8))\n",
        "plt.title('Customer Cohort Analysis : Count')\n",
        "sns.heatmap(data=cohort_counts,annot = True,vmin = 0.0,fmt=\".0f\",cmap=\"coolwarm\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6lHPeg4Qo7sL"
      },
      "source": [
        "### Retention Rate table\n",
        "- Customer retention Rate(고객 유지율): 전체 고객 중 얼마나 많은 고객이 여전히 활성 상태인지 이해하는 데 매우 유용한 지표 -> 유지는 \"총 고객 수\"와 비교하여 \"활성 고객의 비율\"을 제공"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 508
        },
        "id": "1EgylBECo7sL",
        "outputId": "f5af0ab0-1e24-4b1e-b892-5c9f71e5cee7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "CohortIndex        0     1     2     3     4     5     6     7     8     9   \\\n",
              "FirstOrderDate                                                                \n",
              "2010-12-01      100.0  36.6  32.3  38.4  36.3  39.8  36.3  34.9  35.4  39.5   \n",
              "2011-01-01      100.0  22.1  26.6  23.0  32.1  28.8  24.7  24.2  30.0  32.6   \n",
              "2011-02-01      100.0  18.7  18.7  28.4  27.1  24.7  25.3  27.9  24.7  30.5   \n",
              "2011-03-01      100.0  15.0  25.2  19.9  22.3  16.8  26.8  23.0  27.9   8.6   \n",
              "2011-04-01      100.0  21.3  20.3  21.0  19.7  22.7  21.7  26.0   7.3   NaN   \n",
              "2011-05-01      100.0  19.0  17.3  17.3  20.8  23.2  26.4   9.5   NaN   NaN   \n",
              "2011-06-01      100.0  17.4  15.7  26.4  23.1  33.5   9.5   NaN   NaN   NaN   \n",
              "2011-07-01      100.0  18.1  20.7  22.3  27.1  11.2   NaN   NaN   NaN   NaN   \n",
              "2011-08-01      100.0  20.7  24.9  24.3  12.4   NaN   NaN   NaN   NaN   NaN   \n",
              "2011-09-01      100.0  23.4  30.1  11.4   NaN   NaN   NaN   NaN   NaN   NaN   \n",
              "2011-10-01      100.0  24.0  11.5   NaN   NaN   NaN   NaN   NaN   NaN   NaN   \n",
              "2011-11-01      100.0  11.1   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   \n",
              "2011-12-01      100.0   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   \n",
              "\n",
              "CohortIndex       10    11    12  \n",
              "FirstOrderDate                    \n",
              "2010-12-01      37.4  50.3  26.6  \n",
              "2011-01-01      36.5  11.8   NaN  \n",
              "2011-02-01       6.8   NaN   NaN  \n",
              "2011-03-01       NaN   NaN   NaN  \n",
              "2011-04-01       NaN   NaN   NaN  \n",
              "2011-05-01       NaN   NaN   NaN  \n",
              "2011-06-01       NaN   NaN   NaN  \n",
              "2011-07-01       NaN   NaN   NaN  \n",
              "2011-08-01       NaN   NaN   NaN  \n",
              "2011-09-01       NaN   NaN   NaN  \n",
              "2011-10-01       NaN   NaN   NaN  \n",
              "2011-11-01       NaN   NaN   NaN  \n",
              "2011-12-01       NaN   NaN   NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4db11900-841f-40ef-afe1-d6c76e14bb7f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>CohortIndex</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>10</th>\n",
              "      <th>11</th>\n",
              "      <th>12</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FirstOrderDate</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2010-12-01</th>\n",
              "      <td>100.0</td>\n",
              "      <td>36.6</td>\n",
              "      <td>32.3</td>\n",
              "      <td>38.4</td>\n",
              "      <td>36.3</td>\n",
              "      <td>39.8</td>\n",
              "      <td>36.3</td>\n",
              "      <td>34.9</td>\n",
              "      <td>35.4</td>\n",
              "      <td>39.5</td>\n",
              "      <td>37.4</td>\n",
              "      <td>50.3</td>\n",
              "      <td>26.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01</th>\n",
              "      <td>100.0</td>\n",
              "      <td>22.1</td>\n",
              "      <td>26.6</td>\n",
              "      <td>23.0</td>\n",
              "      <td>32.1</td>\n",
              "      <td>28.8</td>\n",
              "      <td>24.7</td>\n",
              "      <td>24.2</td>\n",
              "      <td>30.0</td>\n",
              "      <td>32.6</td>\n",
              "      <td>36.5</td>\n",
              "      <td>11.8</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-02-01</th>\n",
              "      <td>100.0</td>\n",
              "      <td>18.7</td>\n",
              "      <td>18.7</td>\n",
              "      <td>28.4</td>\n",
              "      <td>27.1</td>\n",
              "      <td>24.7</td>\n",
              "      <td>25.3</td>\n",
              "      <td>27.9</td>\n",
              "      <td>24.7</td>\n",
              "      <td>30.5</td>\n",
              "      <td>6.8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-03-01</th>\n",
              "      <td>100.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>25.2</td>\n",
              "      <td>19.9</td>\n",
              "      <td>22.3</td>\n",
              "      <td>16.8</td>\n",
              "      <td>26.8</td>\n",
              "      <td>23.0</td>\n",
              "      <td>27.9</td>\n",
              "      <td>8.6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-04-01</th>\n",
              "      <td>100.0</td>\n",
              "      <td>21.3</td>\n",
              "      <td>20.3</td>\n",
              "      <td>21.0</td>\n",
              "      <td>19.7</td>\n",
              "      <td>22.7</td>\n",
              "      <td>21.7</td>\n",
              "      <td>26.0</td>\n",
              "      <td>7.3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-05-01</th>\n",
              "      <td>100.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>17.3</td>\n",
              "      <td>17.3</td>\n",
              "      <td>20.8</td>\n",
              "      <td>23.2</td>\n",
              "      <td>26.4</td>\n",
              "      <td>9.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-06-01</th>\n",
              "      <td>100.0</td>\n",
              "      <td>17.4</td>\n",
              "      <td>15.7</td>\n",
              "      <td>26.4</td>\n",
              "      <td>23.1</td>\n",
              "      <td>33.5</td>\n",
              "      <td>9.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-07-01</th>\n",
              "      <td>100.0</td>\n",
              "      <td>18.1</td>\n",
              "      <td>20.7</td>\n",
              "      <td>22.3</td>\n",
              "      <td>27.1</td>\n",
              "      <td>11.2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-08-01</th>\n",
              "      <td>100.0</td>\n",
              "      <td>20.7</td>\n",
              "      <td>24.9</td>\n",
              "      <td>24.3</td>\n",
              "      <td>12.4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-09-01</th>\n",
              "      <td>100.0</td>\n",
              "      <td>23.4</td>\n",
              "      <td>30.1</td>\n",
              "      <td>11.4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-10-01</th>\n",
              "      <td>100.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>11.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-11-01</th>\n",
              "      <td>100.0</td>\n",
              "      <td>11.1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-12-01</th>\n",
              "      <td>100.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4db11900-841f-40ef-afe1-d6c76e14bb7f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4db11900-841f-40ef-afe1-d6c76e14bb7f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4db11900-841f-40ef-afe1-d6c76e14bb7f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c35b39cb-8521-458a-a29b-480c11096fea\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c35b39cb-8521-458a-a29b-480c11096fea')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c35b39cb-8521-458a-a29b-480c11096fea button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"retention\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": \"FirstOrderDate\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-12-01 00:00:00\",\n        \"max\": \"2011-12-01 00:00:00\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"2011-11-01 00:00:00\",\n          \"2011-09-01 00:00:00\",\n          \"2010-12-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 100.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          100.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.196895605988143,\n        \"min\": 11.1,\n        \"max\": 36.6,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          24.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 2,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.31550760934039,\n        \"min\": 11.5,\n        \"max\": 32.300000000000004,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          17.299999999999997\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 3,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.150322448051633,\n        \"min\": 11.4,\n        \"max\": 38.4,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          24.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 4,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.074975461284496,\n        \"min\": 12.4,\n        \"max\": 36.3,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          32.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 5,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.039348506865494,\n        \"min\": 11.200000000000001,\n        \"max\": 39.800000000000004,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          28.799999999999997\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 6,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.9746323993499475,\n        \"min\": 9.5,\n        \"max\": 36.3,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          36.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 7,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.35386138261822,\n        \"min\": 9.5,\n        \"max\": 34.9,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          34.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 8,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.664567501778963,\n        \"min\": 7.3,\n        \"max\": 35.4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          30.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 9,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.364879348501429,\n        \"min\": 8.6,\n        \"max\": 39.5,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          32.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 10,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.41292623311774,\n        \"min\": 6.800000000000001,\n        \"max\": 37.4,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          37.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 11,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27.22361107568208,\n        \"min\": 11.799999999999999,\n        \"max\": 50.3,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          11.799999999999999\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 12,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 26.6,\n        \"max\": 26.6,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          26.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 78
        }
      ],
      "source": [
        "cohort_size = cohort_counts.iloc[:,0]\n",
        "retention = cohort_counts.divide(cohort_size,axis=0) #axis=0 to ensure the divide along the row axis\n",
        "retention.round(3) * 100 #백분율 표시"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 523
        },
        "id": "WSy7KPVao7sM",
        "outputId": "4895aad7-4428-4ecd-a227-a0347c140093"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "FirstOrderDate\n",
              "2010-12-01    885.0\n",
              "2011-01-01    417.0\n",
              "2011-02-01    380.0\n",
              "2011-03-01    452.0\n",
              "2011-04-01    300.0\n",
              "2011-05-01    284.0\n",
              "2011-06-01    242.0\n",
              "2011-07-01    188.0\n",
              "2011-08-01    169.0\n",
              "2011-09-01    299.0\n",
              "2011-10-01    358.0\n",
              "2011-11-01    323.0\n",
              "2011-12-01     41.0\n",
              "Name: 0, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FirstOrderDate</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2010-12-01</th>\n",
              "      <td>885.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01</th>\n",
              "      <td>417.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-02-01</th>\n",
              "      <td>380.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-03-01</th>\n",
              "      <td>452.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-04-01</th>\n",
              "      <td>300.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-05-01</th>\n",
              "      <td>284.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-06-01</th>\n",
              "      <td>242.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-07-01</th>\n",
              "      <td>188.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-08-01</th>\n",
              "      <td>169.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-09-01</th>\n",
              "      <td>299.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-10-01</th>\n",
              "      <td>358.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-11-01</th>\n",
              "      <td>323.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-12-01</th>\n",
              "      <td>41.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ],
      "source": [
        "cohort_size"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zbBn5z1io7sM",
        "outputId": "903cccdf-8757-48a6-ce34-4f04cf714ba5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.36610169491525424"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ],
      "source": [
        "324/885"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wr5cvFMeo7sM",
        "outputId": "93bcf63a-a6d3-4db4-ee52-60795cb6febd"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.3231638418079096"
            ]
          },
          "metadata": {},
          "execution_count": 81
        }
      ],
      "source": [
        "286.0/885"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CQlj1FCSo7sN"
      },
      "source": [
        "#### Retention Heatmap"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 348
        },
        "id": "dbpApbEDo7sN",
        "outputId": "4a22170c-681b-470b-dc33-8c8da2492a6a"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(15, 8))\n",
        "plt.title('Retention rates')\n",
        "sns.heatmap(data=retention,annot = True,fmt = '.1%',vmin = 0.0,vmax = 0.5,cmap=\"coolwarm\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lsY97mMko7sN"
      },
      "source": [
        "### Average Qty for each Cohort"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WQsMr7yto7sN"
      },
      "outputs": [],
      "source": [
        "average_quantity = (\n",
        "    df1.groupby(['FirstOrderDate', 'CohortIndex'])['Quantity']\n",
        "    .mean()\n",
        "    .unstack()\n",
        "    .round(1)\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 508
        },
        "id": "pRW-t--wo7sO",
        "outputId": "7be25d43-7ac0-4ab0-f77e-877f7ebe3ecd"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "CohortIndex       0     1     2     3     4     5     6      7     8     9   \\\n",
              "FirstOrderDate                                                                \n",
              "2010-12-01      12.1  15.7  15.7  15.9  13.6  14.9  16.1   15.6  18.2  17.7   \n",
              "2011-01-01      17.5  13.5  12.7  15.3  12.8  15.4  15.0   15.0  11.6  10.6   \n",
              "2011-02-01      11.2  13.7  19.0  12.0  12.3  12.3  13.6   13.4  11.0  12.4   \n",
              "2011-03-01      10.0  11.7  13.3  10.1  13.8  13.0  13.5   13.9  11.3   9.7   \n",
              "2011-04-01      10.0  10.4   9.8  11.9  12.0   8.7  10.0    9.7   7.6   NaN   \n",
              "2011-05-01      11.5   9.7  14.2  12.8  11.2   8.8  10.8  113.8   NaN   NaN   \n",
              "2011-06-01      10.7  14.7  10.9  13.7  10.7  10.0   9.5    NaN   NaN   NaN   \n",
              "2011-07-01       9.9  13.8   7.4   8.2   6.2   7.2   NaN    NaN   NaN   NaN   \n",
              "2011-08-01      10.1   6.2   5.4   6.2   7.1   NaN   NaN    NaN   NaN   NaN   \n",
              "2011-09-01      12.1   6.3   8.1   9.0   NaN   NaN   NaN    NaN   NaN   NaN   \n",
              "2011-10-01       9.0   7.3   8.5   NaN   NaN   NaN   NaN    NaN   NaN   NaN   \n",
              "2011-11-01       7.9  10.0   NaN   NaN   NaN   NaN   NaN    NaN   NaN   NaN   \n",
              "2011-12-01      15.2   NaN   NaN   NaN   NaN   NaN   NaN    NaN   NaN   NaN   \n",
              "\n",
              "CohortIndex       10    11    12  \n",
              "FirstOrderDate                    \n",
              "2010-12-01      19.0  13.6  15.4  \n",
              "2011-01-01       9.6  10.2   NaN  \n",
              "2011-02-01      13.4   NaN   NaN  \n",
              "2011-03-01       NaN   NaN   NaN  \n",
              "2011-04-01       NaN   NaN   NaN  \n",
              "2011-05-01       NaN   NaN   NaN  \n",
              "2011-06-01       NaN   NaN   NaN  \n",
              "2011-07-01       NaN   NaN   NaN  \n",
              "2011-08-01       NaN   NaN   NaN  \n",
              "2011-09-01       NaN   NaN   NaN  \n",
              "2011-10-01       NaN   NaN   NaN  \n",
              "2011-11-01       NaN   NaN   NaN  \n",
              "2011-12-01       NaN   NaN   NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4fd1829f-0626-4a72-916a-591b3e27215a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>CohortIndex</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>10</th>\n",
              "      <th>11</th>\n",
              "      <th>12</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FirstOrderDate</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2010-12-01</th>\n",
              "      <td>12.1</td>\n",
              "      <td>15.7</td>\n",
              "      <td>15.7</td>\n",
              "      <td>15.9</td>\n",
              "      <td>13.6</td>\n",
              "      <td>14.9</td>\n",
              "      <td>16.1</td>\n",
              "      <td>15.6</td>\n",
              "      <td>18.2</td>\n",
              "      <td>17.7</td>\n",
              "      <td>19.0</td>\n",
              "      <td>13.6</td>\n",
              "      <td>15.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01</th>\n",
              "      <td>17.5</td>\n",
              "      <td>13.5</td>\n",
              "      <td>12.7</td>\n",
              "      <td>15.3</td>\n",
              "      <td>12.8</td>\n",
              "      <td>15.4</td>\n",
              "      <td>15.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>11.6</td>\n",
              "      <td>10.6</td>\n",
              "      <td>9.6</td>\n",
              "      <td>10.2</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-02-01</th>\n",
              "      <td>11.2</td>\n",
              "      <td>13.7</td>\n",
              "      <td>19.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>12.3</td>\n",
              "      <td>12.3</td>\n",
              "      <td>13.6</td>\n",
              "      <td>13.4</td>\n",
              "      <td>11.0</td>\n",
              "      <td>12.4</td>\n",
              "      <td>13.4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-03-01</th>\n",
              "      <td>10.0</td>\n",
              "      <td>11.7</td>\n",
              "      <td>13.3</td>\n",
              "      <td>10.1</td>\n",
              "      <td>13.8</td>\n",
              "      <td>13.0</td>\n",
              "      <td>13.5</td>\n",
              "      <td>13.9</td>\n",
              "      <td>11.3</td>\n",
              "      <td>9.7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-04-01</th>\n",
              "      <td>10.0</td>\n",
              "      <td>10.4</td>\n",
              "      <td>9.8</td>\n",
              "      <td>11.9</td>\n",
              "      <td>12.0</td>\n",
              "      <td>8.7</td>\n",
              "      <td>10.0</td>\n",
              "      <td>9.7</td>\n",
              "      <td>7.6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-05-01</th>\n",
              "      <td>11.5</td>\n",
              "      <td>9.7</td>\n",
              "      <td>14.2</td>\n",
              "      <td>12.8</td>\n",
              "      <td>11.2</td>\n",
              "      <td>8.8</td>\n",
              "      <td>10.8</td>\n",
              "      <td>113.8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-06-01</th>\n",
              "      <td>10.7</td>\n",
              "      <td>14.7</td>\n",
              "      <td>10.9</td>\n",
              "      <td>13.7</td>\n",
              "      <td>10.7</td>\n",
              "      <td>10.0</td>\n",
              "      <td>9.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-07-01</th>\n",
              "      <td>9.9</td>\n",
              "      <td>13.8</td>\n",
              "      <td>7.4</td>\n",
              "      <td>8.2</td>\n",
              "      <td>6.2</td>\n",
              "      <td>7.2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-08-01</th>\n",
              "      <td>10.1</td>\n",
              "      <td>6.2</td>\n",
              "      <td>5.4</td>\n",
              "      <td>6.2</td>\n",
              "      <td>7.1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-09-01</th>\n",
              "      <td>12.1</td>\n",
              "      <td>6.3</td>\n",
              "      <td>8.1</td>\n",
              "      <td>9.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-10-01</th>\n",
              "      <td>9.0</td>\n",
              "      <td>7.3</td>\n",
              "      <td>8.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-11-01</th>\n",
              "      <td>7.9</td>\n",
              "      <td>10.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-12-01</th>\n",
              "      <td>15.2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4fd1829f-0626-4a72-916a-591b3e27215a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4fd1829f-0626-4a72-916a-591b3e27215a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4fd1829f-0626-4a72-916a-591b3e27215a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-86d7d5a2-d209-476e-84a7-3769422994ad\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-86d7d5a2-d209-476e-84a7-3769422994ad')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-86d7d5a2-d209-476e-84a7-3769422994ad button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_c1037d81-bc0f-4ffc-aeba-6c613a813817\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('average_quantity')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c1037d81-bc0f-4ffc-aeba-6c613a813817 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('average_quantity');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "average_quantity",
              "summary": "{\n  \"name\": \"average_quantity\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": \"FirstOrderDate\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-12-01 00:00:00\",\n        \"max\": \"2011-12-01 00:00:00\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"2011-11-01 00:00:00\",\n          \"2011-09-01 00:00:00\",\n          \"2010-12-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.5652010467517763,\n        \"min\": 7.9,\n        \"max\": 17.5,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          10.7,\n          12.1,\n          7.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.295129555552981,\n        \"min\": 6.2,\n        \"max\": 15.7,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          7.3,\n          6.3,\n          15.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 2,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.043333458242772,\n        \"min\": 5.4,\n        \"max\": 19.0,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          14.2,\n          15.7,\n          8.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 3,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.1256821477701293,\n        \"min\": 6.2,\n        \"max\": 15.9,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          6.2,\n          15.3,\n          12.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 4,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.712368788429119,\n        \"min\": 6.2,\n        \"max\": 13.8,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          6.2,\n          12.8,\n          11.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 5,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.051199998127201,\n        \"min\": 7.2,\n        \"max\": 15.4,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          15.4,\n          8.8,\n          14.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 6,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.5631082321126843,\n        \"min\": 9.5,\n        \"max\": 16.1,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          16.1,\n          15.0,\n          10.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 7,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40.99105593500448,\n        \"min\": 9.7,\n        \"max\": 113.8,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          15.6,\n          15.0,\n          113.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 8,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.854607632431607,\n        \"min\": 7.6,\n        \"max\": 18.2,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          11.6,\n          7.6,\n          11.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 9,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.5805027579936315,\n        \"min\": 9.7,\n        \"max\": 17.7,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          10.6,\n          9.7,\n          17.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 10,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.728636167014756,\n        \"min\": 9.6,\n        \"max\": 19.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          19.0,\n          9.6,\n          13.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 11,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.4041630560342617,\n        \"min\": 10.2,\n        \"max\": 13.6,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          10.2,\n          13.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 12,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 15.4,\n        \"max\": 15.4,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          15.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 84
        }
      ],
      "source": [
        "average_quantity"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bIWpar9Mo7sO"
      },
      "source": [
        "#### Average Qty Heatmap"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 346
        },
        "id": "9W9yuxSpo7sO",
        "outputId": "c38046a9-4542-4b04-b644-8cd10e137de4"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x800 with 2 Axes>"
            ],
            "image/png": "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lEpPPxOChM2roWZYB6ZDvaDTqg3EevooTE5EWugJpB7/SaFxAkBSVJLC6zRwaouWmzeXSk88chT3liyB5dChqDtqFDRMjFGQnIzEY7/g8bffQigsVHisbQPHKrS+6vTzvOD+vcozvWFqdRtBZ8jk0rHcvoLc0B+hPXAsxGbWEGlpQ8hKR+HDKORfPAEhO7OM0t4u/Wm14A+EAP5o46S0ujv/GV55pmpAqR2fRFT9KaPjszpRdMcn1RyK7visTpTR8VmdKLrjszpRRsdndaLojs/qRBkdn9WJojs+qxNldHxWJ4ru+KxOlNHxWZ2w4/PtqykdnzX8nU8iIiIiIiIiIqLqR6TGuYlfF1uQiIiIiIiIiIiIahyO+CQiIiIiIiIiIlIxYjUubvS6OOKTiIiIiIiIiIiIahyO+CQiIiIiIiIiIlIxIjFHfL4ujvgkIiIiIiIiIiKiGocdn0RERERERERERFTj8FV3IiIiIiIiIiIiFcPFjV4fR3wSERERERERERFRjcMRn0RERERERERERCpGxBGfr40jPomIiIiIiIiIiKjGYccnERERERERERER1Th81Z2IiIiIiIiIiEjFiMQcr/i62IJERERERERERERU43DEJxERERERERERkYoRibm40eviiE8iIiIiIiIiIiKqcTjik4iIiIiIiIiISMWI1Tji83VxxCcRERERERERERHVOBzxSUSvJWnDRmWHoNKsPxqk7BBUllTPSNkhqDTpjavKDkFlSfXrKDsElVZ0/56yQ1BZEgszZYdA1VTdJYuUHYJKy9IxUXYIKstYjT+zKhIvZCs7BJVlO2CSskMgqhHY8UlERERERERERKRiuLjR6+Or7kRERERERERERFTjcMQnERERERERERGRihGJOV7xdbEFiYiIiIiIiIiIqMZhxycRERERERERERHVOHzVnYiIiIiIiIiISMVwcaPXxxGfREREREREREREVONwxCcREREREREREZGKEatxxOfr4ohPIiIiIiIiIiIiqnE44pOIiIiIiIiIiEjFcI7P18cRn0RERERERERERFTjsOOTiIiIiIiIiIiIahy+6k5ERERERERERKRiRGKOV3xdbEEiIiIiIiIiIiKqcTjik4iIiIiIiIiISMVwcaPXxxGfREREREREREREVOOw45OIiIiIiIiIiIhqHKV2fC5fvhzt27eH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Wb3Ueez4JCIiIiIiIiIioleSmZmJiIgI2QrsDx48QEREhNxiROnp6di/fz/GjRtXZhm9evXC+vXrZfszZ85EWFgYoqOjcf78eXzwwQdQU1PD8OHDXyo2vupORERERERERESkYpT5qvvLuHr1Knr27CnbL5kb1NPTE8HBwQCAPXv2QBCEcjsu79+/j+TkZNn+48ePMXz4cDx9+hRmZmbo0qULLl68CDMzs5eKjR2fRERERERERERE9Ep69OgBQRAqzDNhwgRMmDCh3OPR0dFy+3v27HkTobHjk4iIiIiIiIiISNWIxJyh8nWxBYmIiIiIiIiIiKjG4YhPIiIiIiIiIiIiFVNd5vhUZRzxSURERERERERERDUOOz6JiIiIiIiIiIioxuGr7kRERERERERERCqGixu9PrYgERERERERERER1Tgc8UlERERERERERKRqRFzc6HVxxCcRERERERERERHVOOz4JCIiIiIiIiIiohqHr7oT0WsxmDlf2SGotn+uKTsClRXh/6WyQ1BprYKWKTsElSUtzFd2CCpN5Nxd2SGoLLXkWGWHoNrUNZQdgcrK0tRTdggqzejpfWWHoLJM0pKVHYJKk/QZp+wQiFSaSMxX3V8XR3wSERERERERERFRjcMRn0RERERERERERCpGJOZ4xdfFFiQiIiIiIiIiIqIahyM+iYiIiIiIiIiIVAzn+Hx9HPFJRERERERERERENQ47PomIiIiIiIiIiKjG4avuREREREREREREKoaLG70+tiARERERERERERHVOBzxSUREREREREREpGK4uNHr44hPIiIiIiIiIiIiqnHY8UlEREREREREREQ1Dl91JyIiIiIiIiIiUjF81f31ccQnERERERERERER1Tgc8UlERERERERERKRqxByv+LrYgkRERERERERERFTjcMQnERERERERERGRihGJOMfn6+KITyIiIiIiIiIiIqpx2PFJRERERERERERENY5SOz6XL1+O9u3bQ19fH+bm5nB3d0dUVJRcntzcXPj4+MDExAR6enoYPHgwEhIS5PJMnToVTk5O0NLSgqOjY6l6cnNz4eXlhVatWkFdXR3u7u5VjnH//v1wcHCARCJBq1at8Msvv8iOFRQUICAgAK1atYKuri6sra0xevRoPHnypNJyY2Ji0L9/f+jo6MDc3ByzZs1CYWGh7HhcXBxG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ura5skNQaer1myk7BJXV9tOJyg5BpcXVaazsEFSW1c0Tyg5BpQn6hsoOQXWJ1ZQdgWrLzVZ2BCpLTZqv7BBUWqx5W2WHoLKaujRQdghEVJ1xcaPXxhYkIiIiIiIiIiKiGocjPomIiIiIiIiIiFSMSMzFjV4XR3wSERERERERERFRjcOOTyIiIiIiIiIiIqpx+Ko7ERERERERERGRqhFxvOLrYgsSERERERERERFRjcMRn0RERERERERERKqGixu9No74JCIiIiIiIiIioldy5swZDBw4ENbW1hCJRDh06JDccS8vL4hEIrmtT58+lZa7YcMG2NraQiKRwNnZGZcvX37p2NjxSUREREREREREpGJEIrHStpeRlZWF1q1bY8OGDeXm6dOnD+Li4mTbDz/8UGGZe/fuhb+/PxYvXoxr166hdevWcHNzQ2Ji4kvFxlfdiYiIiIiIiIiI6JX07dsXffv2rTCPlpYWLC0tq1zmqlWrMH78eIwZMwYAEBQUhGPHjmHr1q2YM2dOlcvhiE8iIiIiIiIiIiKSycvLQ3p6utyWl5f3yuWdPn0a5ubmsLe3x6RJk/D06dNy8+bn5yM8PByurq6yNLFYDFdXV1y4cOGl6mXHJxERERERERERkaoRi5S2LV++HIaGhnLb8uXLX+ky+vTpgx07duDkyZP44osvEBYWhr59+6KoqKjM/MnJySgqKoKFhYVcuoWFBeLj41+qbr7qTkRERERERERERDJz586Fv7+/XJqWltYrlTVs2DDZ/7dq1QrvvPMOGjVqhNOnT6NXr16vFWdl2PFJRERERERERESkYkRi5b2oraWl9codnZVp2LAhTE1Nce/evTI7Pk1NTaGmpoaEhAS59ISEhJeaJxTgq+5ERERERERERESkII8fP8bTp09hZWVV5nFNTU04OTnh5MmTsjSpVIqTJ0/CxcXlpepixycRERERERERERG9kszMTERERCAiIgIA8ODBA0RERCAmJgaZmZmYNWsWLl68iOjoaJw8eRLvv/8+GjduDDc3N1kZvXr1wvr162X7/v7++Oabb7B9+3bcuXMHkyZNQlZWlmyV96riq+5ERERERERERESqRiRSdgRVcvXqVfTs2VO2XzI3qKenJzZt2oTr169j+/btSE1NhbW1NXr37o1ly5bJvUp///59JCcny/aHDh2KpKQkLFq0CPHx8XB0dMSJEydKLXhUGaWO+Fy+fDnat28PfX19mJubw93dHVFRUXJ5cnNz4ePjAxMTE+jp6WHw4MGl3vGfOnUqnJycoKWlBUdHx1L15ObmwsvLC61atYK6ujrc3d2rHOP+/fvh4OAAiUSCVq1a4ZdffpE7HhgYCAcHB+jq6qJOnTpwdXXFpUuXKi03JiYG/fv3h46ODszNzTFr1iwUFhbKjsfFxWHEiBFo2rQpxGIx/Pz85M63tbWFSCQqd/Py8gIApKSkwMPDAwYGBjAyMoK3tzcyMzPlyrp+/Tq6du0KiUSC+vXrY8WKFZXGX5XPpbJrLIsgCFi0aBGsrKygra0NV1dX3L17Vy5PVa7pbcV7+vRptG3bFlpaWmjcuDGCg4NL1bVhwwbY2tpCIpHA2dkZly9frtaxqKIbN25gcWAgPEaORN9+/XD+/Hm544IgYMf332OEhwfed3fH3HnzEBsbq6RoFevPO3cxY8VG9J80B87DJiHsSoTsWGFhEdbv+gkjZi1Dd89p6D9pDgI3BCMpJVVp8Spa+L1HmLL5AFwXbEDrqSsQel3++2XTL+fw/iffwnnmanQJWIsJ6/fievQTJUWrWDdu3MTiwCUYMXIU+vTrj/PnL8gdL3muhnuMxCD3DzCnFj1XABD+TyymbDsC12Vb0Xr21wi9eb/cvMsOnELr2V9j59kIxQWoROF3H2Lqxr14b84aOE76BKER8v+W23Q0DO6Bm9Bx2hfo6v8VPl6zEzce1KJ75/5jTPnmJ7guDkLr6SsReuNuuXmX7QtB6+krsTMsXIERKk/4P08wJfgYXD/ZhtYBGxB6659y8y47eBqtAzZg59m/FBihcv15KwqzPluDQeOmo9PgMQi7dE3u+OmLVzFt6Vfo4+mLToPH4O8HMUqKVLGys7PxzeaNGOvpgcHu/TFrxjT8/XdUuflXr1qBgf3eK7VNnjhOgVETEdVsPXr0gCAIpbbg4GBoa2vj119/RWJiIvLz8xEdHY0tW7aU6sCMjo5GYGCgXJqvry8ePnyIvLw8XLp0Cc7Ozi8dm1I7PsPCwuDj44OLFy8iJCQEBQUF6N27N7KysmR5pk+fjiNHjmD//v0ICwvDkydP8OGHH5Yqa+zYsRg6dGiZ9RQVFUFbWxtTp06Fq6trleM7f/48hg8fDm9vb/z5559wd3eHu7s7bt68KcvTtGlTrF+/Hjdu3MC5c+dga2uL3r17Iykpqdxyi4qK0L9/f+Tn5+P8+fPYvn07goODsWjRIlmevLw8mJmZYcGCBWjdunWpMq5cuYK4uDjExcXhwIEDAICoqChZ2tq1awEAHh4euHXrFkJCQnD06FGcOXMGEyZMkJWTnp6O3r17w8bGBuHh4fjyyy8RGBiILVu2VNg2lX0uVbnGsqxYsQLr1q1DUFAQLl26BF1dXbi5uSE3N1eWp7JrelvxPnjwAP3790fPnj0REREBPz8/jBs3Dr/++qssz969e+Hv74/Fixfj2rVraN26Ndzc3JCYmFgtY1FVubm5aGhnh8mTJ5d5fP+PP+Lnn3/GFF9frFm9GhKJBAsWLkR+fr6CI1W8nNw8NLGpi1ljhpU6lpufj6joGIz9sB92LJ+Lz/0nIOZJAmZ+tUkJkSpHTn4B7OuaY+7/3ivzuI25Meb+zxUH5oxBsJ8HrI0NMGnjPqRkZCs4UsXLzc2FnZ0dfCZPKvP4/h9/xOGfj2Cqrw/WrF4FiUSC+bXkuQL+vXesTDH3g+4V5jt58z5uxMTDzEBXQZEpX05eAZrWNcfcYX3KPG5jboI5Q93w44IJ2DbTE9YmRpi0bjdSMrLKzF/TFH/vmGHu4IpXLD15/S5uPIyDmaGegiJTvuLnygRz3St7rv6pdc8VAOTm5aGxbX3MGD+yzOM5uflo7dAEk0f9T8GRKdfXa1fhzz+vwX9mAL7euAVt2jhh4bzZePrcKKHnTfjYBzt27pVt23bshr6+Prp06abgyImIXoFYrLythhAJgiAoO4gSSUlJMDc3R1hYGLp164a0tDSYmZlh9+7dGDJkCAAgMjISzZo1w4ULF9CxY0e58wMDA3Ho0CHZnAJl8fLyQmpqKg4dOlRpPEOHDkVWVhaOHj0qS+vYsSMcHR0RFBRU5jnp6ekwNDTE77//XubKVABw/PhxDBgwAE+ePJH1cAcFBSEgIABJSUnQ1NSUy9+jRw84OjpizZo1ZZZ3+vRp9OzZE8+ePYORkZEs/c6dO2jevDmuXLmCdu3aAQBOnDiBfv364fHjx7C2tsamTZswf/58xMfHy+qdM2cODh06hMjIyDLrq8rn8rLXCBSPJrK2tsaMGTMwc+ZMWV0WFhYIDg7GsGHDqnRNbyvegIAAHDt2TK7je9iwYUhNTcWJEycAAM7Ozmjfvr1sXgqpVIr69etjypQpmDNnTrWLpSr+uV/+qCdF6NuvHxYuWIBOnToBKL6PPEaOxIcffoghgwcDALKysjB8xAj4+/ujR/eKf7l604zTHyq0vuc5D5uEFTM+Rvf2juXmuX0/GmPmf4HD6z+Fpamx4oIDIEl8oND6XtR66gqsHvcB3n2nSbl5MnPy0DlgLbb4DIWzvY0CowPiGiv2Xn1en379sWjBAnTqVDxxuCAIGDFyFAZ/+IHcczVshAdm+E9X+HNldfOEQut7UevZX2P16H54t2UjufSEtEyMXL8Pm7zfx5RtR+DRxREjuzoqPD5B31DhdZZwnPQJVn38P7zraF9unsycPHTx/xKbp3nA2cFOgdEBotwchdb3otbTV2L12EF4t5X8905CagZGrtmNTR8PxpRvfoJH97YY2d1J8QHm51ae5y1pHbABq0f3xbstGsqlFz9XP2KT90BMCT4Gj86tMbJr6UEBb1tW43YKr/N5nQaPwfLZU9DduW2pY3GJyRg8aRaCv1qCpnYNlBAd8FS7nkLqycvLw0eDB2HBoqVo3+G/UT9+UyfDyak9RnlWPu/bhfN/YPmnS/Dt1u9h/pKvS76Kpo2U85kQUc2QHbxEaXXreC1WWt1vkkp14aalpQEAjI2Lf/kODw9HQUGB3ChNBwcHNGjQABcuXCizjDfpwoULpUaIurm5lVt3fn4+tmzZAkNDwzJHaT5fbqtWreSG9bq5uSE9PR23bt16M8H/W4+RkZGsgxAAXF1dIRaLZa/jX7hwAd26dZPriHRzc0NUVBSePXsGoLhjVSQSITo6GkDVPpeqXGN0dDREIhFOnz4NoHgUY3x8vFy5hoaGcHZ2liu3smt60ZuKt7L7IT8/H+Hh4XJ5xGIxXF1dZXmqWyzVUXx8PJ49e4Y2z017oaurC3t7e0TeuaO8wFRUZnYORCIR9HS0lR2KyikoLMKB839BX1sLTeuaKTscpSrvuXKwt8edO2X/kay2kUoFzN8TAq/ubdHY0kTZ4aisgsIiHDh3DXraWmha7+13OFQHUqmA+buOw6tnezS2MlV2OCpFKhUwf+/v8Orehs8VASh+M0oqlUJTU0MuXVNTE7dv3yznLHkhv51Aa8c2Cun0JCJ6bSKR8rYaQmUWN5JKpfDz80Pnzp3RsmVLAJCNQnx+FCMAWFhYID4+/q3HFB8fX2rOgbLqPnr0KIYNG4bs7GxYWVkhJCQEpqbl/8O1vHJLjr0p8fHxMDc3l0tTV1eHsbGxrJ74+HjY2cmPtng+ljp16kBHRwf29vbQ0NCQpVf2uVTlGjU0NGBvbw8dHR259IravCrXVFY7vIl4y8uTnp6OnJwcPHv2DEVFRWXmKRk9W91iqY5KOuzr1Kkjl17HyEh2jIrl5Rdg/e6f0LtTO3Z8Pifs5j0EBB9BbkEBTA30EDT5I9TR01F2WEpV8uwYvfBcGfG5ktl2OhxqYhFGdFb8SLTq4MyNuwj47iBy8wtgaqCPoKketf65KrEt9DLUxGKM6NZG2aGonG1h14rbpvM7yg6FVISOjg4cmjXHnh92oV79BjAyqoMzYacQFXkHVlal3/x60dOnyQi/ehkzZ89TQLRERKQKVGbEp4+PD27evIk9e/YovO6YmBjo6enJts8+++ylzi+ZZ/H8+fPo06cPPvroI9k8in379pWV26JFi7cR/lvXoUMHREZGom7dum+03Lp16yIyMhIdOnR4o+XS25OXl4f09HS5LS8vT9lh0SsoLCzC/LXfAAIw23u4ssNRKe2bNMC+AC/s8BuJzs3sMGvbz3haS+YipFdz+3Eidp37C8s+coWoBv11/E1q39QGe+eNx/aZXujcoiFmf3sAKel8rm4/SsCuM9ewbEQf3jsv+O+56sW2ITn+MwMgCAK8Rg3Hh+/3w5GfD6Fb954QiSu/T0J/D4Gunh46unRSQKRERKQKVGLEp6+vr2yRmnr1/psfxtLSEvn5+UhNTZUblZaQkABLS8s3Vr+1tbXcvKAlr9pbWlqWWuG6rLp1dXXRuHFjNG7cGB07dkSTJk3w3XffYe7cufj222+Rk1M8n1TJiElLS8tSq2uX1PMmr8vS0lJuIRsAKCwsREpKiqye8q6xoliq8rm8yjWWpCckJMDKykruPMd/X6+syjW9rXjLaysDAwNoa2tDTU0NampqFd4z1S2WFy1fvhxLlsjPMTJ1yhRMmzatzPzKUDLS89mzZ7JnGQCepaaiUcOG5Z1WqxQWFmHe2m8Ql5SCjQv9ONrzBTpammhgpokGZnXwjp01Bi7bgkMXbsC7d9Xmva2JSp6r1GfPYPLcc5WamoqGfK5w7cETpGRlo8/yYFlakVTAyqPnsOtcBI7P9VJabKpCW0sTDcyN0cDcGO80rIeBizbgp/MR8O7TWdmhKdW1fx4jJTMbfZb+t6hkkVTAysNh2BV2DccXjVdidMp17UEcUrJy0Gf5dllakVTAymN/YNcff+H4nNFKjI6UycrKGp+vWIXc3BxkZ2fD2NgEXyz/BJaWVhWeJwgCQkJOoOe7rrLfy4iIVJ2oBi0ypCxKbUFBEODr64uffvoJoaGhpV65dnJygoaGBk6ePClLi4qKQkxMDFxcXN5YHOrq6rKOy8aNG8s6S1xcXOTqBoCQkJBK65ZKpbJRcHXr1pWVa2NjIyv3xo0bch14ISEhMDAwQPPmzd/Ydbm4uCA1NRXh4eGytNDQUEilUjg7O8vynDlzBgUFBXKx2Nvbl3pVuERVPpdXuUY7OztYWlrKlZueno5Lly7JlVvZNb2teCu7HzQ1NeHk5CSXRyqV4uTJk7I81S2WF82dOxdpaWly28SJE8vMqyyWlpaoU6cOIv76S5aWlZ2NqKgoODRrpsTIVENJp+ejuESsXzANhvq1Z/XgVyWVAvmFhcoOQ6nKe64io6LQrJmDEiNTDQPa2mP/9BHY6zdctpkZ6MKzexts8n5f2eGpJEEQav1zBQAD2jXH/lme2DtztGwzM9SDZ8922DRxsLLDU6oBbe2x328Y9k4bKtv+e64GKjs8UgESiTaMjU2QmZGBP69dhXPHikdx3rxxHXFPnqB37z4KipCIiFSBUkd8+vj4YPfu3Th8+DD09fVl8woaGhpCW1sbhoaG8Pb2hr+/P4yNjWFgYIApU6bAxcVFbsXpe/fuITMzE/Hx8cjJyZGN3mzevLls0Z7bt28jPz8fKSkpyMjIkOVxfG6hhhdNmzYN3bt3x8qVK9G/f3/s2bMHV69exZYtxX+Vz8rKwqeffopBgwbBysoKycnJ2LBhA2JjY/G///2v3HJ79+6N5s2bY9SoUVixYgXi4+OxYMEC+Pj4QEtLS5avJMbMzEwkJSUhIiICmpqaVe4cbdasGfr06YPx48cjKCgIBQUF8PX1xbBhw2Srn48YMQJLliyBt7c3AgICcPPmTaxduxarV6+WlXP58mWMHj0aJ0+eRN26dav0uVTlGmNjY9GrVy/s2LEDHTp0gEgkgp+fHz755BM0adIEdnZ2WLhwIaytreHu7l7la3qx3DcV78SJE7F+/XrMnj0bY8eORWhoKPbt24djx47J2srf3x+enp5o164dOnTogDVr1iArKwtjxhSvMFndYnmRlpaW3D0KAMkv7CtCTk4Onjx5IttPSEjA/fv3oa+vD3Nzc7i7u2PPnj2oa20NCwsLfP/99zAxMUGnN/gHE1WVnZuLx/FJsv0niU/xd/QjGOjpwtTIEHNWb0HUg0dYGTAZUqkUT1OLF5Uz0NOFhrpKvATwVmXn5SMm6b85KWOfpiLycQIMdbRhqCvBt79dRI+WjWFqqIvUzBzsOfsnEtMy8F6bmt+59+JzFZ8QL/dcfeD+Pn7YswfW1tawtLDEju+/h4mJca14roB/752nabL92JR0RD5JgqG2BFZ19GGkKz9yWkNNDFN9Xdial/1HxJokOzcfMUkpsv3Yp6mIfBQPQ11tGOlq45vj59DjnaYwNdRDamYO9oZdRWJqBt5r++b+2KvKsvPyEZOcKtuPfZqOyNhEGOpIYFXHoPS9IxbD1EAXtubGqOkqf64kcvk11MQw1dOBrVnNf64AIDsnF4/j//tDeFxiEv5+EAMDPV1YmpkgPSMT8ckpSE4p/rkW8yQOAGBiZAiTOoZKiVkRroVfgSAAdevVQ9yTJ9i2dQvq1asP1/fcAADbt32Hp0+T4T8zQO683349Dnt7B9jY2pVVLBGRahJxxOfrUupvuZs2bQIA9OjRQy5927Zt8PLyAgCsXr0aYrEYgwcPRl5eHtzc3LBx40a5/OPGjUNYWJhsv02b4snhHzx4AFtbWwBAv3798PDhw1J5BEEoN75OnTph9+7dWLBgAebNm4cmTZrg0KFDssWX1NTUEBkZie3btyM5ORkmJiZo3749zp49W+F8nmpqajh69CgmTZoEFxcX6OrqwtPTE0uXLpXLVxIjULwC9+7du2FjYyNbXb0qdu3aBV9fX/Tq1UvWjuvWrZMdNzQ0xG+//QYfHx84OTnB1NQUixYtwoQJE2R5sv8dLff8qNDKPpeqXGNBQQGioqKQnZ0tS5s9ezaysrIwYcIEpKamokuXLjhx4gQkkv/+4VvZNZVV7puI187ODseOHcP06dOxdu1a1KtXD99++y3c3NxkeYYOHYqkpCQsWrQI8fHxcHR0xIkTJ+QWGapOsaiqu3fvImDOHNn+lm++AQC4urpihr8//jdkCHJzc7Hu66+RmZmJFi1aYNnSpbI/hNRkd+7HYPKy//5wseb7HwEA/bt1xLghA3A2/DoAYFTAp3LnbVw4HU4tmiouUCW5FROPcV//N5f0Vz+dAgAM6tASC4b2xoOEp/j58k2kZubASFeCFg2ssG3aiFqx0vLfd+8iYM5c2f6Wb74FALi69sLMUs9VFlq0aI5Pli6rFc8VANx6nIhxm3+S7X919BwAYJCTA5YNfU9ZYamEWzFPMH71Ttn+yh9DAAADO76DBSP6ITrhKWZsOYDUrGwY6WqjhY01ts7wRGNrM2WFrFC3HiVg3IZ9sv2vDp8GAAxq3wLLRtTukWe3Hidh3JZDsv2vjv4B4N/n6qNeSopKdUTej4bv4i9k++uCi39+9evRGQumjMPZKxH4dMN3suOLVgUBAMZ+9D7GDXVXaKyKlJWVjR3B3yE5ORn6+vro1LkLRnmOhfq/f8BNefYUSUmJL5yThfPnz2HCx5OVETIRESmRSKio54+IqBL/3L+v7BBUmnH6w8oz1VKSxAfKDkGlxTXuruwQVJbVzRPKDkGlCfo1d6TX6xLl5ig7BNWWn6vsCFRWVuN2yg5BpT3Vrld5plqqaaMGyg6BiKqxnJ0vt/j2m6Q9cp7S6n6Tav57jURERERERERERNWNWKTsCKo9ThZARERERERERERENQ5HfBIREREREREREakYERc3em1sQSIiIiIiIiIiIqpxOOKTiIiIiIiIiIhI1XCOz9fGEZ9ERERERERERERU47Djk4iIiIiIiIiIiGocvupORERERERERESkari40WtjCxIREREREREREVGNwxGfREREREREREREqkbExY1eF0d8EhERERERERERUY3Djk8iIiIiIiIiIiKqcfiqOxERERERERERkaoRc7zi62ILEhERERERERERUY3DEZ9ERERERERERESqRsTxiq+LLUhEREREREREREQ1Dkd8EhERERERERERqRqxSNkRVHsc8UlEREREREREREQ1Dkd8EhG9RRl6lsoOQWUlGTRSdggqzSI1UtkhqKyCuo2VHYJKi9J3VnYIKstYPUXZIai0QmgoOwSV9TDTQtkhqLT3GmkpOwQiIqIyseOTiIiIiIiIiIhI1XBxo9fGFiQiIiIiIiIiIqIahyM+iYiIiIiIiIiIVI2Iixu9Lo74JCIiIiIiIiIiohqHHZ9ERERERERERERU4/BVdyIiIiIiIiIiIlUj5njF18UWJCIiIiIiIiIiohqHIz6JiIiIiIiIiIhUDRc3em0c8UlEREREREREREQ1Dkd8EhERERERERERqRoRxyu+LrYgERERERERERER1Tjs+CQiIiIiIiIiIqIah6+6ExERERERERERqRoxxyu+LrYgERERERERERER1Tgc8UlERERERERERKRqRCJlR1DtccQnERERERERERER1Tjs+CQiIiIiIiIiIqIah6+6ExERERERERERqRoRxyu+LqW24PLly9G+fXvo6+vD3Nwc7u7uiIqKksuTm5sLHx8fmJiYQE9PD4MHD0ZCQoJcnqlTp8LJyQlaWlpwdHQsVU9ubi68vLzQqlUrqKurw93dvcox7t+/Hw4ODpBIJGjVqhV++eWXcvNOnDgRIpEIa9asqbTcmJgY9O/fHzo6OjA3N8esWbNQWFgoOx4XF4cRI0agadOmEIvF8PPzkzvf1tYWIpGo3M3LywsAkJKSAg8PDxgYGMDIyAje3t7IzMyUK+v69evo2rUrJBIJ6tevjxUrVlQaf1U+l8qusSyCIGDRokWwsrKCtrY2XF1dcffuXbk8VbmmtxXv6dOn0bZtW2hpaaFx48YIDg4uVdeGDRtga2sLiUQCZ2dnXL58uVrHoopu3LiBxYGB8Bg5En379cP58+fljguCgB3ff48RHh54390dc+fNQ2xsrJKiVazrN29hwZJPMXT0WLgO+AB/XLgkd1wQBATv3I2PRo1Fvw+HYtb8xXgc+0RJ0SpOdnY2tmzehDGeI/Gh+wDMnOGHv/+OqvCcU6dOwtdnIgZ/MBCjPIZhzeqVSE9PV1DEinftzj1M/3Iz+k5egPYjpuL0leuyY4WFRfj6h8MYFrAcXcfMRN/JC7B44/dIepb2f/buOyyKq+EC+Fl6kaoCYkGMBiQaMaiI3Yhii8GSgBIjijWgIhasWGJCojH2SNQoJmosiRJLRLFh8ooNNIoKlqhEYREFRHrZ/f7gY3SlLW13wfN7nnmSnblz75lhXJa7d+YqMbFiRd2+hxnfbUZ/70Xo4DEdZ6/Inp91vx6Cm/836DZuNvp7L0LApp11+vxICgqwf+eP8B0/FJ4jemLGxOE4uGcbpFJpqfsErVkGjyGdiy1zvEcqMLni8XdWcZmZmdjy4w8YN8YDw10HYfbM6WW+J6/+fgU+Gti32PLF5PEKTK0YAd794fPp+8WWvVu/KnWfzIw07N36FeZP/BC+oxywdPpHuBn1lwJTExERqS6ldnyGh4fD29sbFy5cQFhYGPLy8tCvXz9kZGQIZWbMmIHDhw9j//79CA8PR3x8PIYNG1asrnHjxsHNza3EdgoKCqCrq4tp06bB2dlZ7nznz5/HyJEj4eXlhatXr8LV1RWurq6Ijo4uVvbgwYO4cOECLC0ty623oKAAgwYNQm5uLs6fP48dO3YgODgYAQEBQpmcnBw0bNgQCxcuRLt27YrVcfnyZSQkJCAhIQG///47ACA2NlZYt3btWgCAh4cHbt68ibCwMBw5cgTnzp3DxIkThXrS0tLQr18/WFlZITIyEitXrsSSJUuwefPmMo+hvJ+LPMdYkhUrVmDdunUICgrCxYsXoa+vDxcXF2RnZwtlyjummsr74MEDDBo0CL1798a1a9fg6+uL8ePH4/jx40KZvXv3ws/PD4sXL0ZUVBTatWsHFxcXPH36tFZmUVXZ2dloYW2NL774osTt+3/7DYcOHcJUHx+sWb0aOjo6WLhoEXJzcxWcVPGys7PRokVzTJ1c8r+Jvb8fxMHDRzHdexI2rPoWOjramBuwrM6fm/VrV+Pa1SjMnDUHG374Ee3bf4CF8/3x7NmzEsvfunkTq1etRL9+Lti4aTPmzl+IO3disH7dagUnV5ysnFy8a9UYc8Z+Umxbdm4uYh48htdQF/zy1WysmOGFRwlPMfO7sn9X1CVZOblo1awx/D1HFNuWnZuLmIf/YfxQF+xcPgsrfQvPj9+qLUpIqhiHf/8FJ48dwJhJs7By469wH+ONIwd34viRfaXu8/kEP2zccVRY1m07hHoGhnDs+qECkysef2cVt37t97h6NQp+s/yx/ofNaN/eAYvmz8HzUt6TJ07yxs879wrL9p93w8DAAN269VBw8po3O3A3vt58Wlh8Fha+z7Z36ldi+fz8PGxYPgnJSfHw8luFRWsOYdSkxTAyNVNkbCIiqikikfKWOkIkLeureQVLSkqCmZkZwsPD0aNHD7x48QINGzbE7t27MWJE4R8aMTExaN26NSIiItC5c2eZ/ZcsWYKQkBBcu3at1DY8PT2RmpqKkJCQcvO4ubkhIyMDR44cEdZ17twZ9vb2CAoKEtY9efIEjo6OOH78OAYNGgRfX99iIzRfd+zYMQwePBjx8fEwNzcHAAQFBcHf3x9JSUnQ0tKSKd+rVy/Y29uXOpL07Nmz6N27N1JSUmBsbCysv337Nuzs7HD58mV06NABABAaGoqBAwfi8ePHsLS0xKZNm7BgwQKIxWKh3blz5yIkJAQxMTEltifPz6WixwgUjniwtLTEzJkzMWvWLKEtc3NzBAcHw93dXa5jqqm8/v7+OHr0qEzHt7u7O1JTUxEaGgoAcHR0RMeOHbFhwwYAgEQiQdOmTTF16lTMnTu31mWRx7/378tVrqYMGDgQixYuRJcuXQAUXkcen32GYcOGYcTw4QCAjIwMjBw1Cn5+fujVs6dC82lKchTa3uucBw/F0gVz0dXJEUDhuXH73Asjhg7Bp8NcAQDpGRn45LOxmOM7Fb17dldovmw1fYW0k5OTg0+Gf4xFAUvRsZOjsH76tC/QwaEjRo8ZW2yfA7/vx59Hj2Drth3CusOHQvDb/n3Y8ctuheQ2Ty35PVgROo6ahpUzxqNXx/dLLXPz/iN4LlqFw+uWwKKBqeLCARAp+aNLB4/p+G6GF3p1KPv8jAn4HkfWLlb4+Yk1cCy/UBWtXDYTRsammDhtgbBuTeBcaGlp44uZS+Wq48qFcKwJnIvVWw6goVmjmooqw1QjWSHtlEbVf2flQ7PG28jJycGnw4dgYcAymfdk32lfwKGU9+Q3RZz/HwK/Woqt236B2f9/Vqppj9IV086bfgv+FtGR57B43RGISvgj9K8T+3DqcDAWrf4D6ho1//MrTd922kprm4ioLssOC1Za2zp9PZXWdnVSqYcFvHhReEuYqWnhHwiRkZHIy8uTGaVpa2uLZs2aISIiosbzREREFBsh6uLiItO2RCLB6NGjMXv2bLz33nty19u2bVuhU6uo3rS0NNy8ebN6wv9/O8bGxkIHIQA4OztDTU0NFy9eFMr06NFDpiPSxcUFsbGxSElJAVDYsSoSifDw4UMA8v1c5DnGhw8fQiQS4ezZswAKRzGKxWKZeo2MjODo6ChTb3nH9Kbqylve9ZCbm4vIyEiZMmpqanB2dhbK1LYstZFYLEZKSgrav/bYC319fdjY2CDm9m3lBVMBCYmJSE5JwQf2r0aR19PXR2ubVrgVU/Zt37VZQUEBJBIJNN/4wkVbSxs3b5X8nmtra4dnz5Jw+fIlSKVSpKSk4H9//4UOHTsqInKtkJ6ZDZFIhHp6usqOopLSs4rOj56yo9SId23b4ub1y0h4EgcAePTgLmJv/YN2Dk5y13E27BDea9dRYZ2equht/J1V9J6spSXbSaelpYVbt4rfVVWSsBOhaGffXmGdnsqSn5+Hy38dhVNv1xI7PQHgRuRZWLdqh70/fY15E3rhq5lDcfzAFkgkBQpOS0RENUJNTXlLHaEykxtJJBL4+vqia9euaNOmDQAIoxBfH8UIAObm5hCLxTWeSSwWy3Q+ldT2t99+Cw0NDUybNq3K9RZtqy5isRhmZrK3uWhoaMDU1FRoRywWw9rautQsJiYm0NPTg42NDTQ1NYX15f1c5DlGTU1N2NjYQO///ygsWl/WOZfnmEo6D9WRt7QyaWlpyMrKQkpKCgoKCkosUzR6trZleVNOTg5ycnKKrdPWVp1v+Ys67E1MTGTWmxgbC9veVikpqQAAE2MjmfXGxsZITk1VfCAF0dPTg21rO+z5dReaNm0GY2NjnAs/g5iY22jUqOTHk9i99x5mzZ6LFd98hdzcXBQUFKCTY2dM+WKqgtOrppzcPGz49Q/0c/qAHZ8lyMnNw/pfD8HF6QPU09NRdpwa8dGIz5GVlYHZX7hBTU0NEokEn3w2GV179Zdr/5TnSfgn8gK8Z8k3OrSueht/Z73+ntykaTMYG5vgXPgZxJbxnvy658+fIfLKJcyaM18BaZXr+qXTyMp4CcdeH5da5nniY9xJuoSO3QZhyrwfkCSOw96tX6GgIB8DP5miwLRERESqSWW6cL29vREdHY09e/YovO24uDjUq1dPWL7++mu59ouMjMTatWsRHBxc6rewAwYMEOqVd0SoqunUqRNiYmLQuHHjaq23cePGiImJQadOnaq1Xqo5gYGBMDIykllef+wDkaqaOWsOIJVizOiRGPrxIBw69Ad69OwFkVrJ791xcY+w+ccf4D7SA2vWbcTSL7/G08REbNywVsHJVU9+fgHmrdsOKYC54z5VdhyVk59fgLnrgwvPz9i6e34u/n0K/ws/Du+Zy7B89Q5M8g3AnyG7cO7UUbn2P3f6T+jp10MHR8Xeyk2qwW+WP6RSKTxHj8Swjwfi8KEQ9OjZu9T35NedPhkG/Xr10NmpiwKSKtf5MwdhZ98VxmU8r1MilcLA0BQjJwWgWQs7OHTpD5dhE/B32H4FJiUiIlJdKjHi08fHR5ikpkmTJsJ6CwsL5ObmIjU1VWZUWmJiIiwsLKqtfUtLS5nnghbdam9hYVFshuvX2/7rr7/w9OlTNGvWTNheUFCAmTNnYs2aNXj48CG2bt2KrKwsABBGTFpYWBSbXbuoneo8LgsLC5mJbAAgPz8fycnJQjulHWNZWeT5uVTmGIvWJyYmolGjRjL72f//LWDyHFNN5S3tXBkaGkJXVxfq6upQV1cv85qpbVneNG/ePPj5+cmse/L4cYlllaVo1ExKSorwbxkAUlJT8U6LFsqKpRJMTIwBACmpL1D/tXOTmpqKd94Y+V3XNGpkiW9WrEJ2dhYyMzNhalof3wZ+BQuLkm+x3b93D1rbvYfhIwo7rqytW0BHRwf+s/0w+nNPmJrWV2R8lVHU6Sl+lowfFkzlaM83FHZ6Fp6fTfN96uxoTwDYHbweHw3/HE49+gIAmjVviWdPE3Dot5/Ro8+gMveVSqUIP3kY3XoPgIam8p5JqAre1t9Zhe/J37/xnry81PfkIlKpFGFhoej9obPwubquSk6KR+z1C5gwq+xJ9YyMG0BdQwNqaurCOovG1khLfYb8/DxoKPG5n0REVHXSOjTJkLIodcSnVCqFj48PDh48iNOnTxe75drBwQGampo4deqUsC42NhZxcXFwcpL/GVLl0dDQQMuWLYWl6IOnk5OTTNsAEBYWJrQ9evRoXL9+HdeuXRMWS0tLzJ49W5hdu3HjxkK9VlZWQr03btyQ6cALCwuDoaEh7Ozsqu24nJyckJqaisjISGHd6dOnIZFI4OjoKJQ5d+4c8vLyZLLY2NgUu+2qiDw/l8oco7W1NSwsLGTqTUtLw8WLF2XqLe+YaipvedeDlpYWHBwcZMpIJBKcOnVKKFPbsrxJW1sbhoaGMosq3eYOFHbompiY4No//wjrMjIzERsbC9vWrZWYTPkamZvD1MQEV69dF9ZlZGbiduxd2NnaKDGZ4ujo6MLUtD7SX75EVNQVdO5c8rWek5MDNZHsr0i1/3/OjepMCahYRZ2eceIkbJzvDWMDxUxOVVsUdXrGiZPww7y6f35yc7Kh9sYHcTU1dUilknL3vR0dhcSEx+jV96OaildrvO2/s15/T74adQWOncsexRl94zoS4uPRr598j1SozSLOhMDAyBTvfVD2xIMtbOyRJP4PEsmrf3tPEx7B0KQhOz2JiIig5BGf3t7e2L17N/744w8YGBgIzxU0MjKCrq4ujIyM4OXlBT8/P5iamsLQ0BBTp06Fk5OTzIzT9+7dQ3p6OsRiMbKysoTRm3Z2dsKkPbdu3UJubi6Sk5Px8uVLoYz9aw+Tf9P06dPRs2dPrFq1CoMGDcKePXtw5coVbN68GQBQv3591K8vO+pHU1MTFhYWsLEpvROhX79+sLOzw+jRo7FixQqIxWIsXLgQ3t7eMp1IRRnT09ORlJSEa9euQUtLS+7O0datW6N///6YMGECgoKCkJeXBx8fH7i7uwuzn48aNQpLly6Fl5cX/P39ER0djbVr12L16lffLl+6dAmff/45Tp06hcaNG8v1c5HnGJ88eYI+ffrg559/RqdOnSASieDr64vly5ejVatWsLa2xqJFi2BpaQlXV1e5j+nNeqsr7+TJk7FhwwbMmTMH48aNw+nTp7Fv3z4cPfrqtj4/Pz+MGTMGHTp0QKdOnbBmzRpkZGRg7NjCGUprWxZVlZWVhfj4eOF1YmIi7t+/DwMDA5iZmcHV1RV79uxBY0tLmJub45dffkH9+vXRpRq/MFFVWVlZeJLw6hmtCYmJuPfvAxjUqwdzs4YY9vFg7Nq7H40bN4KFuTmCd+5GfVNTYeb3uioy8goglaJxkyZIiI/Htm1b0KRJUzj3dQEABG//Cc+fPy+8JR5AJ8fOWL9uNf48ehgffNABycnJ2LJ5E95916bY+35dkZmdg//EScLr+KTniH34GEb19NDA2Aj+a39CzIPHWD17EgokUjxLTQMAGNXTg6aGStxAUqPePD9P3jg/c9ZuQ+zDx1g9ayIKJJI6f37ad+yGkP3BqN/QAk2aWePhv3dw7I9f0dN5sFBmz44fkJKchCkzFsvsezbsMN559z00tXpH0bGVgr+ziouKvAypFMJ78vZtm2Xek3ds/wnPnz+D3yx/mf1OHD8GGxtbWDWv23cpSCQSXDj7Bxx7DoG6uuz7x88b5sPI1Bwfj5oOAOjezw3nju/Bb8Hfomf/kUgSx+HEwa3oOWCUMqITEVF1E6nMEyprLaV+Et+0aRMAoFevXjLrt2/fDk9PTwDA6tWroaamhuHDhyMnJwcuLi744YcfZMqPHz8e4eHhwuv27dsDKJwlvHnz5gCAgQMH4tGjR8XKSMsYutOlSxfs3r0bCxcuxPz589GqVSuEhIQIky9Vlrq6Oo4cOYIpU6bAyckJ+vr6GDNmDJYtWyZTrigjUPg80d27d8PKykqYXV0eu3btgo+PD/r06SOcx3Xr1gnbjYyMcOLECXh7e8PBwQENGjRAQEAAJk6cKJTJ/P+RB6+PCi3v5yLPMebl5SE2NhaZmZnCujlz5iAjIwMTJ05EamoqunXrhtDQUOjovLpdsLxjKqne6shrbW2No0ePYsaMGVi7di2aNGmCrVu3wsXFRSjj5uaGpKQkBAQEQCwWw97eHqGhoTKTDNWmLKrq7t278J87V3i9ecsWAICzszNm+vnhkxEjkJ2djXXr1yM9PR3vvfcevly2TPgipC6LvXsfs+YvEl4Hbd0OAOjXpzfmzJgGt+FDkZ2djdXrNyE9IwNt7Frjm2WL6vy5yczIwI7gbXj27BkMDAzQpWs3fD5mLDT+v0MqJSUZSUmvRlk79+2HrKxMHDl8CD9t3Qx9fX28384enmPHK+sQatztf+Mwefl64fXqnQcBAIN6dMLE4QNwLrJwtmWPed/K7Be0cCoc7FopLqiS3Po3DpO/2iC8Xr0zBAAwuHsnTBzeH+eiCs/PqPkrZPYLWuCDDnXw/IyZOBO/7dqM7UErkfYiBSamDfBhf1cMc/MSyqSmPMPzJNnJ8jIz0nH5/BmMnjBD0ZGVhr+zisvIyMTPwT/JvCePHjNOeE9OTnku855cuE8Gzp//GxMnfaGMyAoVe+MCUp4loHNv12Lbkp+JIXrtj2CTBhb4YkEQDuxYgcDZI2BsaoZeAzzQ13WcAhMTERGpLpG0rJ4/IqJy/Hv/vrIjqDRNSY6yI6isbLW6fStwVZmnxig7gsoS8aNLmWIN6vYI7qow1UhWdgSVlg/eGl2aR+nm5Rd6i/Vtp1qPPiIiqiuyzuxSWtu6vT2U1nZ1qnv3XhEREREREREREdV2vNW9yngGiYiIiIiIiIiIqM7hiE8iIiIiIiIiIiIVIxWJlB2h1uOITyIiIiIiIiIiIqpz2PFJREREREREREREdQ5vdSciIiIiIiIiIlI1nNyoyngGiYiIiIiIiIiIqM7hiE8iIiIiIiIiIiJVw8mNqowjPomIiIiIiIiIiKhSzp07h48++giWlpYQiUQICQkRtuXl5cHf3x9t27aFvr4+LC0t8fnnnyM+Pr7MOpcsWQKRSCSz2NraVjgbOz6JiIiIiIiIiIhUjZqa8pYKyMjIQLt27bBx48Zi2zIzMxEVFYVFixYhKioKBw4cQGxsLIYMGVJuve+99x4SEhKE5e+//65QLoC3uhMREREREREREVElDRgwAAMGDChxm5GREcLCwmTWbdiwAZ06dUJcXByaNWtWar0aGhqwsLCoUjaO+CQiIiIiIiIiIiJBTk4O0tLSZJacnJxqqfvFixcQiUQwNjYus9zdu3dhaWmJFi1awMPDA3FxcRVuix2fREREREREREREKkYqEiltCQwMhJGRkcwSGBhY5WPKzs6Gv78/Ro4cCUNDw1LLOTo6Ijg4GKGhodi0aRMePHiA7t274+XLlxVqj7e6ExERERERERERkWDevHnw8/OTWaetrV2lOvPy8vDpp59CKpVi06ZNZZZ9/db5999/H46OjrCyssK+ffvg5eUld5vs+CQiIiIiIiIiIlI1IuXdqK2trV3ljs7XFXV6Pnr0CKdPny5ztGdJjI2N8e677+LevXsV2o+3uhMREREREREREVGNKOr0vHv3Lk6ePIn69etXuI709HTcv38fjRo1qtB+7PgkIiIiIiIiIiKiSklPT8e1a9dw7do1AMCDBw9w7do1xMXFIS8vDyNGjMCVK1ewa9cuFBQUQCwWQywWIzc3V6ijT58+2LBhg/B61qxZCA8Px8OHD3H+/HkMHToU6urqGDlyZIWy8VZ3IiIiIiIiIiIiFSNV4q3uFXHlyhX07t1beF30bNAxY8ZgyZIlOHToEADA3t5eZr8zZ86gV69eAID79+/j2bNnwrbHjx9j5MiReP78ORo2bIhu3brhwoULaNiwYYWyiaRSqbQSx0REBABI+Sdc2RFUWlI9a2VHUFnNIvcpO4JKk5g3UXYElZVZ30rZEVTaIy0bZUdQWY0lj5QdQaVFtnVXdgSVNSgvVtkRiIjoLZR+4ZDS2q7XeYjS2q5OHPFJRERERERERESkakQiZSeo9WrHmFkiIiIiIiIiIiKiCuCITyIiIiIiIiIiIhVTW57xqcp4BomIiIiIiIiIiKjOYccnERERERERERER1Tm81Z2IiIiIiIiIiEjVcHKjKuOITyIiIiIiIiIiIqpzOOKTiIiIiIiIiIhI1XByoyrjGSQiIiIiIiIiIqI6hx2fREREREREREREVOfwVnciIiIiIiIiIiIVI+XkRlXGEZ9ERERERERERERU53DEJxERERERERERkarh5EZVxjNIREREREREREREdQ5HfBIREREREREREakYKfiMz6riiE8iIiIiIiIiIiKqc9jxSURERERERERERHWOUjs+AwMD0bFjRxgYGMDMzAyurq6IjY2VKZOdnQ1v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ff0qhyIiIiIiIiIiIiKqigrd6j5s2DAAgEgkgqenJ7S1tYVtBQUFuH79Orp06VK9CYmIiIiIiIiIiIgqqEIdn0ZGRgAKR3waGBjITGSkpaWFzp07Y8KECdWbkIiIiIiIiIiI6C3DyY2qrkIdn9u3bwcANG/eHLNmzeJt7URERERERERERKSSKjWr++LFi6s7BxERERERERERERUpYX4dqphKdXwCwG+//YZ9+/YhLi4Oubm5MtuioqKqHIyIiIiIiIiIiIiosir1sIB169Zh7NixMDc3x9WrV9GpUyfUr18f//77LwYMGFDdGYmIiIiIiIiIiN4qUqgpbakrKnUkP/zwAzZv3oz169dDS0sLc+bMQVhYGKZNm4YXL15Ud0YiIiIiIiIiIiKiCqlUx2dcXBy6dOkCANDV1cXLly8BAKNHj8avv/5afemIiIiIiIiIiIiIKqFSHZ8WFhZITk4GADRr1gwXLlwAADx48ABSqbT60hEREREREREREb2FpCKR0pa6olIdnx9++CEOHToEABg7dixmzJiBvn37ws3NDUOHDq3WgEREREREREREREQVValZ3Tdv3gyJRAIA8Pb2Rv369XH+/HkMGTIEkyZNqtaAREREREREREREbxupqO5MMqQsler4VFNTg5raq5Pv7u4Od3f3agtFREREREREREREVBWV6vi8e/cu/vjjDzx8+BAikQgtWrSAq6srrK2tqzsfERERERERERERUYWJpBWcjSgwMBABAQGQSCQwMzODVCpFUlIS1NXV8fXXX2PWrFk1lZWIVFB87HVlR1BpxhEHlR1BZb10HKzsCCrN6O4FZUdQWck23ZUdQaVla+grO4LKyoGOsiOotNbvNFZ2BCIiInpNQsw1pbXdyNZeaW1Xpwo9LODMmTNYuHAhFixYgGfPniEhIQFisRhJSUmYO3cu5s6di3PnztVUViIiIiIiIiIiIiK5VOhW96CgIIwfPx5LliyRWW9qaoply5ZBLBZj06ZN6NGjR3VmJCIiIiIiIiIieqtwcqOqq9AZvHTpEkaPHl3q9tGjR+PCBd6aR0RERERERERERMpVoRGfiYmJaN68eanbra2tIRaLq5qJiIiIiIiIiIjorSYViZQdodar0IjP7OxsaGlplbpdU1MTubm5VQ5FREREREREREREVBUVGvEJAFu3bkW9evVK3Pby5csq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K+jdu7fw2s/PDwAwZswYBAcHy3W36f379/Hs2TPhtTx3BMujUiM+L126hI8++ghSqVSYwf369esQiUQ4fPgwOnXqVNEqiaiW4ojPsnHEZ+k44rNsHPFZOo74LBtHfJaOIz7LxhGfREREquXu/UflF6ohrd6xKr9QLVCpEZ+dOnXCv//+i127dgnTyLu5uWHUqFHQ1+eHbSIiIiIiIiIioqqQQnmTG9UVFe74zMvLg62tLY4cOSIzkQoRERERERERERGRqqhwx6empiays7NrIgsRERERERERERGBIz6rQ6Wekurt7Y1vv/0W+fn51Z2HiIiIiIiIiIiIqMoq9YzPy5cv49SpUzhx4gTatm1b7LmeBw4cqJZwRERERERERERERJVRqY5PY2NjDB8+vLqzEBEREREREREREXire3WoVMfn9u3bqzsHERERERERERERUbWpVMcnAFy/fh137twBANjY2KBt27bVFoqIiIiIiIiIiOhtxhGfVVfhjs9Lly7By8sLt27dglQqBQCIRCK89957+Omnn9CxY8dqD0lERERERERERERUERWa1f3WrVvo06cPdHV1sXPnTkRFRSEqKgq//PILtLW10adPH9y6daumshIRERERERERERHJRSQtGrYph08//RT5+fn4/fffIRLJDreVSqUYNmwYNDU1sW/fvmoPSkSqKT72urIjqDTjiIPKjqCyXjoOVnYElWZ094KyI6isZJvuyo6g0rI19JUdQWXlQEfZEVRa63caKzsCERERvebWvXiltW3X0lJpbVenCt3qfubMGRw7dqxYpydQeLv7/PnzMXDgwGoLR0RERERERERERFQZFer4fPnyJczNzUvdbmFhgZcvX1Y5FBERERERERER0duMkxtVXYWe8WllZYVLly6Vuv3ixYuwsrKqcigiIiIiIiIiIiKiqqhQx6e7uzv8/PwQHR1dbNuNGzcwa9YsuLm5VVs4IiIiIiIiIiKit5EUIqUtdUWFbnWfN28eTp48CXt7e/Tt2xetW7eGVCrF7du3cfLkSXTq1Anz58+vqaxEREREREREREREcqlQx6eOjg7OnDmD1atX49dff0V4eDgA4N1338Xy5csxY8YMaGtr10hQIlJNmRoGyo6g0kxN6is7gsqKyn5f2RFUmkFLW2VHUFkPEjlreVlM6uUrO4LKGvxBhT76EhEREVEt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4cLr9u3bAyicJbx58+YAgIEDB+LRo0fFypR1u36XLl2we/duLFy4EPPnz0erVq0QEhIiTL5UZM+ePZBKpRg5cqRcx62uro4jR45gypQpcHJygr6+PsaMGYNly5bJlCvKCBTOwL17925YWVkJs6vLY9euXfDx8UGfPn2E87hu3Tphu5GREU6cOAFvb284ODigQYMGCAgIwMSJE4UymZmZiI2NlRkVWt7PRZ5jzMvLQ2xsLDIzM4V1c+bMQUZGBiZOnIjU1FR069YNoaGhMs9NLe+YSqq3OvJaW1vj6NGjmDFjBtauXYsmTZpg69atcHFxEcq4ubkhKSkJAQEBEIvFsLe3R2hoqMwkQ7Upi6rJzMhEcPB2PHv2DAYG9dC1azd8PsYTGhqFb2XJKclISno1UrZAIsHBAwfw5MljqKur4/332+G7Vd/D3Lz6Himham4+forxPx4UXn935G8AwBAHW3zp1ldZsZTuzo0IpDxLgGOv4hPSpDxLeCuf+QoAoybMQcjuH7BzcyBevkiBsUlD9Ow3HEM+ffU7IDXlGZKTXk14du7EARQU5GPX5m+wa/M3wvouvT+C17SlCs1f0yyt38cnUzbg9MHv8deRjTBu0AR93eajbechQpn01CS8SE4QXked2wdJQT5Cdy9D6O5X79vvOw3FkHHfoK65G130b6v4xI6pzxJk7gw6H7YXBfl52LFmhky5fsO/gMsI7xrPSkRERERvH5G0uh7USURvpXv3H5Rf6C3WJPpo+YXeUmeaTVJ2BJVmoJ2r7Agq68Ezjg4si0m9fGVHUFmDP6jS4+2JiIiIFOr87ZdKa7tL67pxtxI//REREREREREREakYTm5UdW/nvX1ERERERERERERUp3HEJxERERERERERkYrh5EZVxxGfREREREREREREVOdwxCcREREREREREZGKkXA68irjiE8iIiIiIiIiIiKqc9jxSURERERERERERHUOb3UnIiIiIiIiIiJSMZzcqOo44pOIiIiIiIiIiIjqHI74JCIiIiIiIiIiUjFSKUd8VhVHfBIREREREREREVGdw45PIiIiIiIiIiIiqnN4qzsREREREREREZGKkUqVnaD244hPIiIiIiIiIiIiqnM44pOIiIiIiIiIiEjFSMDJjaqKIz6JiIiIiIiIiIiozmHHJxEREREREREREdU5vNWdiIiIiIiIiIhIxUilvNW9qtjxSURVoo4CZUdQaftNfJQdQWWliZWdQLUZ6msqO4LKMtLj+05ZBn/Aj3dERERERAA7PomIiIiIiIiIiFSOVKrsBLUfn/FJREREREREREREldK8eXOIRKJii7e3d4nlg4ODi5XV0dGpkWwc8UlERERERERERKRipKgdz/i8fPkyCgpePY4qOjoaffv2xSeffFLqPoaGhoiNjRVei0Q1c6zs+CQiIiIiIiIiIqJKadiwoczrb775Bu+88w569uxZ6j4ikQgWFhY1HY23uhMREREREREREdErOTk5SEtLk1lycnLK3S83Nxc7d+7EuHHjyhzFmZ6eDisrKzRt2hQff/wxbt68WZ3xBez4JCIiIiIiIiIiUjESqfKWwMBAGBkZySyBgYHlZg4JCUFqaio8PT1LLWNjY4Nt27bhjz/+wM6dOyGRSNClSxc8fvy4Gs9eIZFUyjmiiKjyHty/p+wIKu3vJy2VHUFlpWUoO4FqM9RXdgLVZaRXUH6ht9iQDurKjkBERERE1SD0Wq7S2u7dWlpshKe2tja0tbXL3M/FxQVaWlo4fPiw3G3l5eWhdevWGDlyJL788stK5S0Nn/FJRERERERERESkYqRS5U1upK2tVW4n55sePXqEkydP4sCBAxXaT1NTE+3bt8e9e9U/sIq3uhMREREREREREVGVbN++HWZmZhg0aFCF9isoKMCNGzfQqFGjas/Ejk8iIiIiIiIiIiKqNIlEgu3bt2PMmDHQ0JC9wfzzzz/HvHnzhNfLli3DiRMn8O+//yIqKgqfffYZHj16hPHjx1d7Lt7qTkREREREREREpGJq06w8J0+eRFxcHMaNG1dsW1xcHNTUXo29TElJwYQJEyAWi2FiYgIHBwecP38ednZ21Z6LkxsRUZVwcqOycXKj0nFyo7JxcqPScXKjsnFyIyIiIqK64c+oPKW1PfADTaW1XZ044pOIiIiIiIiIiEjFSKC8yY3qCj7jk4iIiIiIiIiIiOocjvgkIiIiIiIiIiJSMXw4ZdVxxCcRERERERERERHVOez4JCIiIiIiIiIiojpHqR2fgYGB6NixIwwMDGBmZgZXV1fExsbKlMnOzoa3tzfq16+PevXqYfjw4UhMTJQpM23aNDg4OEBbWxv29vbF2snOzoanpyfatm0LDQ0NuLq6yp1x//79sLW1hY6ODtq2bYs///xTZnt6ejp8fHzQpEkT6Orqws7ODkFBQeXWm5ycDA8PDxgaGsLY2BheXl5IT0+XO3OvXr0gEolKXXr16iXUU975i4uLw6BBg6CnpwczMzPMnj0b+fn5ZeaXSqUICAhAo0aNoKurC2dnZ9y9e7dCx1iajRs3onnz5tDR0YGjoyMuXboks12eY6qpvNevX0f37t2ho6ODpk2bYsWKFcXaKu+aqW1ZVNGNG9FYvGQpRn02Gv0HDsL58xEy26VSKX7+5ReM9PgMQ1yHYu78+Xjy5ImS0ipGWkoiQrbOwipfR3zzxfv4cclHiH94o9TyMVEnsOv7sfh+RmesmPoBtge64X70XwpMrDgXjq3HOl8bmeWXr/vLte+dqKNY52uDI1u/qOGUysNrp3RfT3fGbA+7YsuB7V+WWF78+C52rJku7PfXsZ8VnJiIiIiI6hKpVKS0pa5QasdneHg4vL29ceHCBYSFhSEvLw/9+vVDRkaGUGbGjBk4fPgw9u/fj/DwcMTHx2PYsGHF6ho3bhzc3NxKbKegoAC6urqYNm0anJ2d5c53/vx5jBw5El5eXrh69SpcXV3h6uqK6OhooYyfnx9CQ0Oxc+dO3L59G76+vvDx8cGhQ4fKrNvDwwM3b95EWFgYjhw5gnPnzmHixIlyZz5w4AASEhKQkJAgdAyePHlSWHfgwAEA5Z+/goICDBo0CLm5uTh//jx27NiB4OBgBAQElJl/xYoVWLduHYKCgnDx4kXo6+vDxcUF2dnZch9jSfbu3Qs/Pz8sXrwYUVFRaNeuHVxcXPD06VOhjLzXRHXnTUtLQ79+/WBlZYXIyEisXLkSS5YswebNm4Uy8lwztS2LKsrOzoa1tTW8v5hS4vb9v/2GPw4dxjQfb6xZ/T10dHSwYNEi5ObmKjipYmRlvMCOb0dCTV0T7tO3YNLSo3D+xB86ekal7hN35zKs7brAfdpmjF94AFY2jti7YQrEcbcUmFxxTC1awWvZ38IyYtrucvdJe/4Yf/3xLSxbdFBAQuXgtVO2aV/uw6KN4cIyYd5WAEA7R5cSy+flZKO+WRMMdPeDgXEDRUYlIiIiIqISiKRS1XlUalJSEszMzBAeHo4ePXrgxYsXaNiwIXbv3o0RI0YAAGJiYtC6dWtERESgc+fOMvsvWbIEISEhuHbtWqlteHp6IjU1FSEhIeXmcXNzQ0ZGBo4cOSKs69y5M+zt7YVRnW3atIGbmxsWLVoklHFwcMCAAQOwfPnyEuu9ffs27OzscPnyZXToUPgHdWhoKAYOHIjHjx/D0tKyQpkfPnwIa2trXL16VWbEqzzn79ixYxg8eDDi4+Nhbm4OAAgKCoK/vz+SkpKgpaVVrD2pVApLS0vMnDkTs2bNEtoyNzdHcHAw3N3dK3yMRRwdHdGxY0ds2LABACCRSNC0aVNMnToVc+fOrfA1UZ15N23ahAULFkAsFgvnZe7cuQgJCUFMTAyA8q+Z2pZFHg/u35OrXE3pP3AQAhYuRJcuTgAKf96jPhuN4cOGYsTw4QCAjIwMuI/ywEy/GejVs6dC8/39pGWNt3H69+/w370ojPEvvzOvLEEBg2DXcQB6fORTTcnKlpZRfpnqcOHYevx74yRGzflD7n0kkgL8vt4Ddo7DEX8/EjlZaRg8/ocaTFmcoX7Nt1Fbrx0jvQKFtPOmP34JxO2rZ+G/KhQiUdnfgn893Rnd+3+O7gM+V1C6V4Z0UFd4m0RERERU/UIuK+dzLwC4dqwbnylV6hmfL168AACYmpoCACIjI5GXlycz4tHW1hbNmjVDREREiXVUp4iIiGKjLV1cXGTa7tKlCw4dOoQnT55AKpXizJkzuHPnDvr161dmvcbGxkKnFgA4OztDTU0NFy9erLb88py/iIgItG3bVuj0LDrGtLQ03Lx5E0Bhx6pIJMLZs2cBAA8ePIBYLJap18jICI6OjjL1ynOMIpEIwcHBAIDc3FxERkbK1KumpgZnZ2eh3spcE9WVNyIiAj169JDpDHZxcUFsbCxSUlKEMmVdM7UtS20kFouRkpKC9q99CaCvrw9bGxvcvh2jvGA16M4/p9GoeRv8HjQN3/s5YcsyV0Sd21ehOqQSCXJzMqCrb1wzIZUs9dkj/BTQDcFf9sHxX2biZUp8meUvHd8I3Xr18V7nTxSUUDl47cgvPz8XUX8fRseew8rt9CQiIiIiItWgMh2fEokEvr6+6Nq1K9q0aQMAwmg2Y2NjmbLm5uYQi8U1nkksFst0CJbU9vr162FnZ4cmTZpAS0sL/fv3x8aNG9GjR48y6zUzM5NZp6GhAVNT02o9LnnOX2nHWLQNADQ1NWFjYwM9PT2Z9WWdG3mP0cbGBkZGhbdUPnv2DAUFBeXWW9FrorryynOuyrtmaluWN+Xk5CAtLU1mycnJKbGsshR1/BqbmMisNzY2FrbVNSlJ/yHy7K8wMWuOUb4/waHXSJzYsxz/nD8odx0RJ35CbnYm7DoMqMGkymFh9T76jgrEx5O3oveIJXjx/Al+W+eB3OySnzkc/+8V3LzwG/q4lfwcx7qE1478bl45hezMl+jQY6iyoxARERERkZxUpuPT29sb0dHR2LNnj8LbjouLQ7169YTl66+/lnvf9evX48KFCzh06BAiIyOxatUqeHt74+TJkwCAyZMny9RdGzVu3BgxMTHo1KlTtdcdExODoUP5R2RtERgYCCMjI5llU9CPyo711pNKpWhk9R4+HOYHi2Z2+KCHG9p3/xRR4fK9n0ZfPIy/Dm/EsElroG9Yv4bTKl5zu55oZT8ADSxtYdW6Oz6euBk5WWm4e+1YsbK52ek4sXMO+rh9Cd16pkpIq1i8duR36ewB2LTrDiMTs/ILExERERFVA6lUeUtdoaHsAADg4+MjTODSpEkTYb2FhQVyc3ORmpoqM8IvMTERFhYW1da+paWlzHNBi261t7CwKDZb+OttZ2VlYf78+Th48CAGDRoEAHj//fdx7do1fPfdd3B2dsayZcuE5ye+flyvT9YDAPn5+UhOTq7W45Ln/FlYWBSbNb3omEvLUrQ+MTERjRo1ktmv6BmjlTnGBg0aQF1dvcxzXplrorrylnY9vN5GeddMbcvypnnz5sHPz09mXfzj/0osqywm/z/SMzUlBfVNX3VcpaamokWLFsqKVaPqGTVEg0bvyKxr0KgFYqKOl7vvzUtHceTnhRg+aS1a2HWpqYgqRVvPEMYNmyM1Ka7YthfP/kNa8hMc3vpq4iypVAIAWO9nh9HzQ2HcoJnCstY0XjvySUl6grvREfjcd62yoxARERERUQUodcSnVCqFj48PDh48iNOnT8Pa2lpmu4ODAzQ1NXHq1ClhXWxsLOLi4uDk5FRtOTQ0NNCyZUthKer4dHJykmkbAMLCwoS28/LykJeXBzU12dOorq4OiaTwD2UzMzOZuovqTU1NRWRkpLDP6dOnIZFI4OjoWG3HJc/5c3Jywo0bN2Q62sLCwmBoaAg7O7sS67W2toaFhYVMvWlpabh48aJMvRU9Ri0tLTg4OMjUK5FIcOrUKaHeylwT1ZXXyckJ586dQ15ensy5srGxETrbyrtmaluWN2lra8PQ0FBm0dbWLrGsslhYWMDExATX/vlHWJeRmYmY2Fi0bm2rxGQ1p2nLD/Bc/EBm3fPEhzCq37jM/aIvHsHh4HkYOmEVWr3fqwYTqpbcnAy8eP4f9A0bFttmYt4CHv6HMWp2iLC0eO9DNGnpiFGzQ2BgXH1fTqkCXjvyuXzuIOoZmaJ1e8VOjkZEREREbzcpREpb6gqldnx6e3tj586d2L17NwwMDCAWiyEWi5GVlQWgcKIVLy8v+Pn54cyZM4iMjMTYsWPh5OQkM3v3vXv3cO3aNWHfa9eu4dq1a8jNzRXK3Lp1C9euXUNycjJevHghlCnL9OnTERoailWrViEmJgZLlizBlStX4ONTOGutoaEhevbsidmzZ+Ps2bN48OABgoOD8fPPP5d5+3br1q3Rv39/TJgwAZcuXcL//vc/+Pj4wN3dXWa288pkfp08569fv36ws7PD6NGj8c8//+D48eNYuHAhvL29hQ6tJ0+ewNbWVhgZKhKJ4Ovri+XLl+PQoUO4ceMGPv/8c1haWsLV1bVCx2hra4uDB189S87Pzw9btmzBjh07cPv2bUyZMgUZGRkYO3as3Mf0Zr3VlXfUqFHQ0tKCl5cXbt68ib1792Lt2rUyIyDLu2ZqWxZVlZWVhfv37+P+/fsAAHGiGPfv38fTp08hEokw1PVj/LpnDyIuXMCDBw/x3XerUL++KbpU4xcmqsTReQyePPgHfx8NQvLTR4i+eBhXz+2DQ69RQpnTB1bhj5/mCK+jLx7Goe3+cP7EH42t2yH9RRLSXyQhO/OlMg6hRv31x7d4fO8S0p4/RsKDKBz9yQcikRredRgMADixcw7+d3gVAEBDUxv1G70rs2jrGkJLWx/1G70LdQ2tspqqdXjtlE8ikeBy+EF06O4KdXXZG2V+3TQXf+75Xnidn5+LJw9v48nD2yjIz8OLlEQ8eXgbz8SPFB2biIiIiIig5FvdN23aBADo1auXzPrt27fD09MTALB69Wqoqalh+PDhyMnJgYuLC3744QeZ8uPHj0d4eLjwun379gAKZ61u3rw5AGDgwIF49OhRsTLSMh5c0KVLF+zevRsLFy7E/Pnz0apVK4SEhAiTLwHAnj17MG/ePHh4eCA5ORlWVlb46quvMHny5DKPfdeuXfDx8UGfPn2E41u3bp1MmcpkflN5509dXR1HjhzBlClT4OTkBH19fYwZMwbLli0TyuTl5SE2NhaZmZnCujlz5iAjIwMTJ05EamoqunXrhtDQUOjo6FToGGNjY/HixQvhtZubG5KSkhAQEACxWAx7e3uEhobKTMAjzzXxZr3VkdfIyAgnTpyAt7c3HBwc0KBBAwQEBGDixIlCGXmumdqWRRXduXsX/nPnCa83b9kKAHB27oNZfn74ZMQIZGdnY9369UhPz8B779lh+bIvoaVVtzqtilhav49PpmzA6YPf468jG2HcoAn6us1H285DhDLpqUl4kZwgvI46tw+SgnyE7l6G0N2v/r2/7zQUQ8Z9o9D8NS09VYzjP/shKyMVuvVMYdnCAZ/O2Ae9/3+G58uUBIhEKvPIa4XitVO+u9ERSH2egI49hxXblvpc9tpJS0nCmgXDhdfhR7cj/Oh2tGjdEVMW7lBIXiIiIiKqOyR16FmbyiKSVqQXjYjoDQ/u31N2BJX295OWyo6gstIylJ1AtRnqKzuB6jLSK1B2BJU2pIO6siMQERERUTX47aJEaW2PcKwbg0PqxlEQERERERERERERvUYlZnUnIiIiIiIiIiKiV3iPdtVxxCcRERERERERERHVORzxSUREREREREREpGI44rPqOOKTiIiIiIiIiIiI6hx2fBIREREREREREVGdw1vdiYiIiIiIiIiIVIxEKlJ2hFqPIz6JiIiIiIiIiIiozuGITyIiIiIiIiIiIhXDyY2qjiM+iYiIiIiIiIiIqM7hiE8iIiIiIiIiIiIVwxGfVccRn0RERERERERERFTnsOOTiIiIiIiIiIiI6hze6k5ERERERERERKRiJLzVvco44pOIiIiIiIiIiIjqHI74JCIiIiIiIiIiUjFSqUjZEWo9jvgkIiIiIiIiIiKiOocdn0RERERERERERFTn8FZ3IqqSBsl3lB1BpYlE7yg7gspq2yxT2RFUmqEWz09p7Fs1VHYEIiIiIqIaJ+XkRlXGEZ9ERERERERERERU53DEJxERERERERERkYqRcMRnlXHEJxEREREREREREdU5HPFJRERERERERESkYviMz6rjiE8iIiIiIiIiIiKqc9jxSURERERERERERHUOb3UnIiIiIiIiIiJSMbzVveo44pOIiIiIiIiIiIjqHI74JCIiIiIiIiIiUjESjvisMo74JCIiIiIiIiIiMr2ugAAAVa9JREFUojqHHZ9ERERERERERERU5/BWdyIi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ozik48ePKyAgQKmpqercubPRcRySv7+/3njjDcXGxhodxSGcOXNGd955p+bMmaNXX31Vbdu21fTp042OZbiJEycqOTn5D1clU16jRo3S//73P/33v/81OorDS0hI0KpVq7Rv3z6ZTCaj4xjugQceUGBgoN555x3buV69esnLy0uLFi0yMJnxzp07p5o1a2rlypXq2bOn7Xx4eLh69OihV1991cB0xrry5z+r1arg4GCNGDFCL774oiQpJydHgYGBWrhwofr06WNg2spV1s/GP//8s0JDQ7V9+3a1bdu20rM5gvL822HLli3q0KGDDh48qEaNGlVeOOAaUPEJoEorKChQenq6oqKibOdcXFwUFRWltLQ0A5OhqsnJyZF0cXEP9oqKirRkyRLl5eUpMjLS6DgOIy4uTj179rT7+wcX7du3T8HBwWrSpIn69eunQ4cOGR3JYXzyySdq166dHnvsMQUEBOiOO+7QP//5T6NjOZyCggItWrRIzzzzDIue/1+nTp20du1a/fDDD5Kk7777Tt9++6169OhhcDLjXbhwQUVFRfL09LQ77+XlRcX5FQ4cOCCz2Wz3/12+vr6KiIjgZ2dcs5ycHJlMJvn5+RkdBSiVm9EBAOBGnDhxQkVFRQoMDLQ7HxgYqL179xqUClWNxWJRQkKC7rrrLrVu3droOA5jx44dioyM1Pnz51WjRg2tWLFCrVq1MjqWQ1iyZIm2bdv2h31+XFkiIiK0cOFCtWjRQkePHtWkSZN0zz33aOfOnapZs6bR8Qz3008/ae7cuUpMTNSYMWO0ZcsWDRs2TO7u7howYIDR8RxGcnKysrOzNXDgQKOjOIxRo0YpNzdXYWFhcnV1VVFRkf72t7+pX79+RkczXM2aNRUZGalXXnlFLVu2VGBgoD788EOlpaWpWbNmRsdzKGazWZJK/Nn50ntAeZw/f14jR45U37595ePjY3QcoFQsfAIA/vDi4uK0c+dOqkKu0KJFC2VkZCgnJ0f/+c9/NGDAAKWmpv7hFz9/+eUXDR8+XCkpKcWqiyC76rPbbrtNERERaty4sT766CMek6CLv2hp166dXnvtNUnSHXfcoZ07d2revHksfF7mnXfeUY8ePRQcHGx0FIfx0Ucf6YMPPtDixYt16623KiMjQwkJCQoODua7I+n999/XM888o/r168vV1VV33nmn+vbtq/T0dKOjAU6nsLBQjz/+uKxWq+bOnWt0HKBM3OoOoEqrU6eOXF1dlZWVZXc+KytLQUFBBqVCVRIfH69Vq1bp66+/VoMGDYyO41Dc3d3VrFkzhYeHKykpSbfffrtmzJhhdCzDpaen69ixY7rzzjvl5uYmNzc3paamaubMmXJzc1NRUZHRER2Kn5+fbrnlFu3fv9/oKA6hXr16xX550LJlSx4HcJmDBw/qq6++0qBBg4yO4lBeeukljRo1Sn369FGbNm301FNP6YUXXlBSUpLR0RxC06ZNlZqaqjNnzuiXX37R5s2bVVhYqCZNmhgdzaFc+vmYn51xvS4teh48eFApKSlUe8LhsfAJoEpzd3dXeHi41q5daztnsVi0du1ankWIMlmtVsXHx2vFihVat26dQkNDjY7k8CwWi/Lz842OYbhu3bppx44dysjIsB3t2rVTv379lJGRIVdXV6MjOpQzZ87oxx9/VL169YyO4hDuuusuZWZm2p374Ycf1LhxY4MSOZ4FCxYoICDAbpMaXNxR2cXF/p9vrq6uslgsBiVyTN7e3qpXr55OnTqlNWvW6KGHHjI6kkMJDQ1VUFCQ3c/Oubm52rRpEz8746ouLXru27dPX331lWrXrm10JOCquNUdQJWXmJioAQMGqF27durQoYOmT5+uvLw8Pf3000ZHM9yZM2fsqqwOHDigjIwM+fv7/+F3XoyLi9PixYu1cuVK1axZ0/ZcK19fX3l5eRmcznijR49Wjx491KhRI50+fVqLFy/WN998ozVr1hgdzXA1a9Ys9ixYb29v1a5dm2fESnrxxRf14IMPqnHjxjpy5IgmTJggV1dX9e3b1+hoDuGFF15Qp06d9Nprr+nxxx/X5s2bNX/+fM2fP9/oaA7BYrFowYIFGjBggNzc+KfK5R588EH97W9/U6NGjXTrrbdq+/bt+vvf/65nnnnG6GgOYc2aNbJarWrRooX279+vl156SWFhYX/Inwev9vNfQkKCXn31VTVv3lyhoaEaN26cgoODy9y921lcbW5OnjypQ4cO6ciRI5Jk+0VVUFDQH6Iitqz5qVevnh599FFt27ZNq1atUlFRke3nZ39/f7m7uxsVGyibFQCcwD/+8Q9ro0aNrO7u7tYOHTpYN27caHQkh/D1119bJRU7BgwYYHQ0w5U0L5KsCxYsMDqaQ3jmmWesjRs3trq7u1vr1q1r7datm/XLL780OpbD6tKli3X48OFGx3AIvXv3ttarV8/q7u5urV+/vrV3797W/fv3Gx3LoXz66afW1q1bWz08PKxhYWHW+fPnGx3JYaxZs8YqyZqZmWl0FIeTm5trHT58uLVRo0ZWT09Pa5MmTax//etfrfn5+UZHcwhLly61NmnSxOru7m4NCgqyxsXFWbOzs42OZYir/fxnsVis48aNswYGBlo9PDys3bp1+8P8N3e1uVmwYEGJ70+YMMHQ3JWlrPk5cOBAqT8/f/3110ZHB0plslqt1pu5sAoAAAAAAAAAlY1nfAIAAAAAAABwOix8AgAAAAAAAHA6LHwCAAAAAAAAcDosfAIAAAAAAABwOix8AgAAAAAAAHA6LHwCAAAAAAAAcDosfAIAAAAAAABwOix8AgAAAAAAAHA6LHwCAAAAJZg4caLatm1rdIxr9s0338hkMik7O9voKAAAAIZi4RMAAABOyWw2a+jQoWrSpIk8PDzUsGFDPfjgg1q7dq3R0UpdVA0JCdH06dMrPQ8AAIAzcjM6AAAAAFDRfv75Z911113y8/PTG2+8oTZt2qiwsFBr1qxRXFyc9u7da0guq9WqoqIiQ64NAADwR0PFJwAAAJzO888/L5PJpM2bN6tXr1665ZZbdOuttyoxMVEbN26UJB06dEgPPfSQatSoIR8fHz3++OPKysoq1tf777+vkJAQ+fr6qk+fPjp9+rTtvfz8fA0bNkwBAQHy9PTU3XffrS1bttjev3Tb+RdffKHw8HB5eHho0aJFmjRpkr777juZTCaZTCYtXLiwxHGYTCb961//0sMPP6zq1aurefPm+uSTT+zafP7557rlllvk5eWle++9Vz///HOxfr799lvdc8898vLyUsOGDTVs2DDl5eVJkt577z3VqFFD+/bts5u/sLAwnT17ttxzDgAA4GhY+AQAAIBTOXnypFavXq24uDh5e3sXe9/Pz08Wi0UPPfSQTp48qdTUVKWkpOinn35S79697dr++OOPSk5O1qpVq7Rq1SqlpqZqypQptvdffvllffzxx3r33Xe1bds2NWvWTNHR0Tp58qRdP6NGjdKUKVO0Z88e/fnPf9aIESN066236ujRozp69Gix615u0qRJevzxx/X999/r/vvvV79+/Wz9//LLL3rkkUf04IMPKiMjQ4MGDdKoUaOKjeG+++5Tr1699P3332vp0qX69ttvFR8fL0nq37+/rd8LFy7os88+07/+9S998MEHql69+rVNPgAAgANh4RMAAABOZf/+/bJarQoLCyu1zdq1a7Vjxw4tXrxY4eHhioiI0HvvvafU1FS7ik2LxaKFCxeqdevWuueee/TUU0/ZnhGal5enuXPn6o033lCPHj3UqlUr/fOf/5SXl5feeecdu+tNnjxZf/7zn9W0aVPVr19fNWrUkJubm4KCghQUFCQvL69Ssw4cOFB9+/ZVs2bN9Nprr+nMmTPavHmzJGnu3Llq2rSppk2bphYtWqhfv34aOHCg3eeTkpLUr18/JSQkqHnz5urUqZNmzpyp9957T+fPn5ckvf322zp69KiGDRum2NhYTZw4UeHh4dc07wAAAI6GhU8AAAA4FavVetU2e/bsUcOGDdWwYUPbuVatWsnPz0979uyxnQsJCVHNmjVtr+vVq6djx45JulhJWVhYqLvuusv2frVq1dShQwe7PiSpXbt21z2e2267zfZnb29v+fj42DLs2bNHERERdu0jIyPtXn/33XdauHChatSoYTuio6NlsVh04MABSVKtWrX0zjvv2BZSr6waBQAAqIrY3AgAAABOpXnz5jKZTBWygVG1atXsXptMJlkslmvup6Rb7isrw5kzZ/SXv/xFw4YNK/Zeo0aNbH9ev369XF1ddfToUeXl5dkt+AIAAFRFVHwCAADAqfj7+ys6OlqzZ8+2beBzuezsbLVs2VK//PKLfvnlF9v53bt3Kzs7W61atSrXdZo2bSp3d3f973//s50rLCzUli1brtqHu7t7hezu3rJlS9tt75dc2rzpkjvvvFO7d+9Ws2bNih3u7u6SpA0bNuj111/Xp59+qho1atie/wkAAFCVsfAJAAAApzN79mwVFRWpQ4cO+vjjj7Vv3z7t2bNHM2fOVGRkpKKiotSmTRv169dP27Zt0+bNm9W/f3916dKl3Lele3t767nnntNLL72k1atXa/fu3Xr22Wd19uxZxcbGlvnZkJAQHThwQBkZGTpx4oTy8/Ova5xDhgzRvn379NJLLykzM1OLFy8utkP8yJEjtWHDBsXHxysjI0P79u3TypUrbYubp0+f1lNPPaVhw4apR48e+uCDD7R06VL95z//ua5MAAAAjoKFTwAAADidJk2aaNu2bbr33ns1YsQItW7dWn/+85+1du1azZ07VyaTSStXrlStWrXUuXNnRUVFqUmTJlq6dOk1XWfKlCnq1auXnnrqKd15553av3+/1qxZo1q1apX5uV69eum+++7Tvffeq7p16+rDDz+8rnE2atRIH3/8sZKTk3X77bdr3rx5eu211+za3HbbbUpNTdUPP/yge+65R3fccYfGjx+v4OBgSdLw4cPl7e1t+1ybNm302muv6S9/+YsOHz58XbkAAAAcgclanqe/AwAAAAAAAEAVQsUnAAAAAAAAAKfDwicAAAAAAAAAp8PCJwAAAAAAAACnw8InAAAAAAAAAKfDwicAAAAAAAAAp8PCJwAAAAAAAACnw8InAAAAAAAAAKfDwicAAAAAAAAAp8PCJwAAAAAAAACnw8InAAAAAAAAAKfDwicAAAAAAAAAp/P/ADNJj7jg+AjvAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(15, 8))\n",
        "plt.title('Average quantity for each cohort')\n",
        "sns.heatmap(data=average_quantity,annot = True,vmin = 0.0,vmax =20,cmap=\"coolwarm\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eksw1vx0o7sO"
      },
      "source": [
        "### Net Revenue by Cohort"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Li_7OeUjo7sP"
      },
      "outputs": [],
      "source": [
        "df1['Sales'] = df1['Quantity'] * df1['UnitPrice']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 508
        },
        "id": "BdS4f6ZQo7sP",
        "outputId": "1e339ed2-fa55-4876-d71e-67e960b63a63"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "CohortIndex             0          1          2          3          4   \\\n",
              "FirstOrderDate                                                           \n",
              "2010-12-01      570422.730  275734.47  233390.47  302367.44  204034.38   \n",
              "2011-01-01      292366.840   54993.86   63157.01   71526.09   80989.77   \n",
              "2011-02-01      157700.590   28937.64   40964.47   48155.39   40089.17   \n",
              "2011-03-01      199619.670   30040.34   58958.41   42739.08   51392.44   \n",
              "2011-04-01      121809.051   29398.59   25028.57   24282.79   26253.16   \n",
              "2011-05-01      123739.300   18641.70   20155.73   19162.17   27752.62   \n",
              "2011-06-01      135414.800   14738.49   14104.37   30898.56   26669.90   \n",
              "2011-07-01       73860.401   11789.67   15488.37   17391.93   19156.82   \n",
              "2011-08-01       79601.140   20933.76   35458.48   44487.65   15284.36   \n",
              "2011-09-01      154734.091   28701.15   36898.95   12299.53        NaN   \n",
              "2011-10-01      173425.190   39691.40   12567.28        NaN        NaN   \n",
              "2011-11-01      135131.330   15223.34        NaN        NaN        NaN   \n",
              "2011-12-01       27005.460        NaN        NaN        NaN        NaN   \n",
              "\n",
              "CohortIndex            5          6          7           8          9   \\\n",
              "FirstOrderDate                                                           \n",
              "2010-12-01      336113.69  313668.16  310304.03  331001.070  471792.13   \n",
              "2011-01-01       84464.57   70073.35   72503.42   71870.481  111370.70   \n",
              "2011-02-01       34155.67   49673.71   62292.80   55241.340   64688.86   \n",
              "2011-03-01       39962.33   64824.15   70523.62   70847.620   12761.10   \n",
              "2011-04-01       30103.24   28505.90   34009.61    6332.000        NaN   \n",
              "2011-05-01       32875.34   33168.34  179184.23         NaN        NaN   \n",
              "2011-06-01       42531.09    8143.22        NaN         NaN        NaN   \n",
              "2011-07-01        6040.70        NaN        NaN         NaN        NaN   \n",
              "2011-08-01            NaN        NaN        NaN         NaN        NaN   \n",
              "2011-09-01            NaN        NaN        NaN         NaN        NaN   \n",
              "2011-10-01            NaN        NaN        NaN         NaN        NaN   \n",
              "2011-11-01            NaN        NaN        NaN         NaN        NaN   \n",
              "2011-12-01            NaN        NaN        NaN         NaN        NaN   \n",
              "\n",
              "CohortIndex            10         11         12  \n",
              "FirstOrderDate                                   \n",
              "2010-12-01      455478.90  512341.08  185360.97  \n",
              "2011-01-01      123252.86   26388.03        NaN  \n",
              "2011-02-01       10600.22        NaN        NaN  \n",
              "2011-03-01            NaN        NaN        NaN  \n",
              "2011-04-01            NaN        NaN        NaN  \n",
              "2011-05-01            NaN        NaN        NaN  \n",
              "2011-06-01            NaN        NaN        NaN  \n",
              "2011-07-01            NaN        NaN        NaN  \n",
              "2011-08-01            NaN        NaN        NaN  \n",
              "2011-09-01            NaN        NaN        NaN  \n",
              "2011-10-01            NaN        NaN        NaN  \n",
              "2011-11-01            NaN        NaN        NaN  \n",
              "2011-12-01            NaN        NaN        NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a594a5aa-8112-47f3-bf1b-9588c60f7eee\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>CohortIndex</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>10</th>\n",
              "      <th>11</th>\n",
              "      <th>12</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FirstOrderDate</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2010-12-01</th>\n",
              "      <td>570422.730</td>\n",
              "      <td>275734.47</td>\n",
              "      <td>233390.47</td>\n",
              "      <td>302367.44</td>\n",
              "      <td>204034.38</td>\n",
              "      <td>336113.69</td>\n",
              "      <td>313668.16</td>\n",
              "      <td>310304.03</td>\n",
              "      <td>331001.070</td>\n",
              "      <td>471792.13</td>\n",
              "      <td>455478.90</td>\n",
              "      <td>512341.08</td>\n",
              "      <td>185360.97</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01</th>\n",
              "      <td>292366.840</td>\n",
              "      <td>54993.86</td>\n",
              "      <td>63157.01</td>\n",
              "      <td>71526.09</td>\n",
              "      <td>80989.77</td>\n",
              "      <td>84464.57</td>\n",
              "      <td>70073.35</td>\n",
              "      <td>72503.42</td>\n",
              "      <td>71870.481</td>\n",
              "      <td>111370.70</td>\n",
              "      <td>123252.86</td>\n",
              "      <td>26388.03</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-02-01</th>\n",
              "      <td>157700.590</td>\n",
              "      <td>28937.64</td>\n",
              "      <td>40964.47</td>\n",
              "      <td>48155.39</td>\n",
              "      <td>40089.17</td>\n",
              "      <td>34155.67</td>\n",
              "      <td>49673.71</td>\n",
              "      <td>62292.80</td>\n",
              "      <td>55241.340</td>\n",
              "      <td>64688.86</td>\n",
              "      <td>10600.22</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-03-01</th>\n",
              "      <td>199619.670</td>\n",
              "      <td>30040.34</td>\n",
              "      <td>58958.41</td>\n",
              "      <td>42739.08</td>\n",
              "      <td>51392.44</td>\n",
              "      <td>39962.33</td>\n",
              "      <td>64824.15</td>\n",
              "      <td>70523.62</td>\n",
              "      <td>70847.620</td>\n",
              "      <td>12761.10</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-04-01</th>\n",
              "      <td>121809.051</td>\n",
              "      <td>29398.59</td>\n",
              "      <td>25028.57</td>\n",
              "      <td>24282.79</td>\n",
              "      <td>26253.16</td>\n",
              "      <td>30103.24</td>\n",
              "      <td>28505.90</td>\n",
              "      <td>34009.61</td>\n",
              "      <td>6332.000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-05-01</th>\n",
              "      <td>123739.300</td>\n",
              "      <td>18641.70</td>\n",
              "      <td>20155.73</td>\n",
              "      <td>19162.17</td>\n",
              "      <td>27752.62</td>\n",
              "      <td>32875.34</td>\n",
              "      <td>33168.34</td>\n",
              "      <td>179184.23</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-06-01</th>\n",
              "      <td>135414.800</td>\n",
              "      <td>14738.49</td>\n",
              "      <td>14104.37</td>\n",
              "      <td>30898.56</td>\n",
              "      <td>26669.90</td>\n",
              "      <td>42531.09</td>\n",
              "      <td>8143.22</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-07-01</th>\n",
              "      <td>73860.401</td>\n",
              "      <td>11789.67</td>\n",
              "      <td>15488.37</td>\n",
              "      <td>17391.93</td>\n",
              "      <td>19156.82</td>\n",
              "      <td>6040.70</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-08-01</th>\n",
              "      <td>79601.140</td>\n",
              "      <td>20933.76</td>\n",
              "      <td>35458.48</td>\n",
              "      <td>44487.65</td>\n",
              "      <td>15284.36</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-09-01</th>\n",
              "      <td>154734.091</td>\n",
              "      <td>28701.15</td>\n",
              "      <td>36898.95</td>\n",
              "      <td>12299.53</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-10-01</th>\n",
              "      <td>173425.190</td>\n",
              "      <td>39691.40</td>\n",
              "      <td>12567.28</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-11-01</th>\n",
              "      <td>135131.330</td>\n",
              "      <td>15223.34</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-12-01</th>\n",
              "      <td>27005.460</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a594a5aa-8112-47f3-bf1b-9588c60f7eee')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a594a5aa-8112-47f3-bf1b-9588c60f7eee button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a594a5aa-8112-47f3-bf1b-9588c60f7eee');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-13bd14c1-1d13-4de3-a2b3-17ca61afc9a8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-13bd14c1-1d13-4de3-a2b3-17ca61afc9a8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-13bd14c1-1d13-4de3-a2b3-17ca61afc9a8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_f6876b11-5e1b-4916-95b1-1edb88b7eafc\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cohort_revenue')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f6876b11-5e1b-4916-95b1-1edb88b7eafc button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('cohort_revenue');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "cohort_revenue",
              "summary": "{\n  \"name\": \"cohort_revenue\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": \"FirstOrderDate\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-12-01 00:00:00\",\n        \"max\": \"2011-12-01 00:00:00\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"2011-11-01 00:00:00\",\n          \"2011-09-01 00:00:00\",\n          \"2010-12-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 135778.20783663838,\n        \"min\": 27005.46,\n        \"max\": 570422.73,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          135131.33,\n          154734.09100000001,\n          570422.73\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 72905.50709661131,\n        \"min\": 11789.67,\n        \"max\": 275734.47,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          39691.4,\n          28701.15,\n          275734.47\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 2,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 63041.02283638876,\n        \"min\": 12567.28,\n        \"max\": 233390.47,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          20155.73,\n          233390.47,\n          36898.95\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 3,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 86549.3438644334,\n        \"min\": 12299.53,\n        \"max\": 302367.44,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          44487.65,\n          71526.09,\n          19162.170000000002\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 4,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59533.87187395132,\n        \"min\": 15284.36,\n        \"max\": 204034.38,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          19156.82,\n          80989.77,\n          27752.62\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 5,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 107411.61048327497,\n        \"min\": 6040.7,\n        \"max\": 336113.69,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          84464.57,\n          32875.340000000004,\n          336113.69\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 6,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 104760.28827428244,\n        \"min\": 8143.22,\n        \"max\": 313668.16,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          313668.16,\n          70073.35,\n          33168.340000000004\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 7,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 105008.32694644047,\n        \"min\": 34009.61,\n        \"max\": 310304.03,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          310304.03,\n          72503.42,\n          179184.22999999998\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 8,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 127994.67278215062,\n        \"min\": 6332.0,\n        \"max\": 331001.07,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          71870.481,\n          6332.0,\n          55241.34\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 9,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 208355.8066160228,\n        \"min\": 12761.1,\n        \"max\": 471792.13,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          111370.7,\n          12761.1,\n          471792.13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 10,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 231294.11250310487,\n        \"min\": 10600.22,\n        \"max\": 455478.9,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          455478.9,\n          123252.86,\n          10600.22\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 11,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 343620.6969932854,\n        \"min\": 26388.03,\n        \"max\": 512341.08,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          26388.03,\n          512341.08\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 12,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 185360.97,\n        \"max\": 185360.97,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          185360.97\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 87
        }
      ],
      "source": [
        "cohort_revenue = (\n",
        "    df1.groupby(['FirstOrderDate', 'CohortIndex'])['Sales'].sum()\n",
        "    .unstack() #Reshapes the grouped data into a pivot table\n",
        ")\n",
        "cohort_revenue\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 340
        },
        "id": "YkUt_MkGo7sP",
        "outputId": "08802e26-842e-4226-9d57-67b3df1a3d76"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(15, 8))\n",
        "plt.title('Net Revenue for each cohort')\n",
        "sns.heatmap(data=cohort_revenue,annot = True,vmin = 0.0,fmt=\".0f\",cmap=\"coolwarm\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pNgHQpIso7sQ"
      },
      "source": [
        "### Cohort Cumulative Lifetime Revenue"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 508
        },
        "id": "-aC-EdEBo7sQ",
        "outputId": "c8f030cb-f27b-4273-c73a-3b0b1e9757f1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "CohortIndex             0           1            2            3            4   \\\n",
              "FirstOrderDate                                                                  \n",
              "2010-12-01      570422.730  846157.200  1079547.670  1381915.110  1585949.490   \n",
              "2011-01-01      292366.840  347360.700   410517.710   482043.800   563033.570   \n",
              "2011-02-01      157700.590  186638.230   227602.700   275758.090   315847.260   \n",
              "2011-03-01      199619.670  229660.010   288618.420   331357.500   382749.940   \n",
              "2011-04-01      121809.051  151207.641   176236.211   200519.001   226772.161   \n",
              "2011-05-01      123739.300  142381.000   162536.730   181698.900   209451.520   \n",
              "2011-06-01      135414.800  150153.290   164257.660   195156.220   221826.120   \n",
              "2011-07-01       73860.401   85650.071   101138.441   118530.371   137687.191   \n",
              "2011-08-01       79601.140  100534.900   135993.380   180481.030   195765.390   \n",
              "2011-09-01      154734.091  183435.241   220334.191   232633.721          NaN   \n",
              "2011-10-01      173425.190  213116.590   225683.870          NaN          NaN   \n",
              "2011-11-01      135131.330  150354.670          NaN          NaN          NaN   \n",
              "2011-12-01       27005.460         NaN          NaN          NaN          NaN   \n",
              "\n",
              "CohortIndex              5            6            7            8   \\\n",
              "FirstOrderDate                                                       \n",
              "2010-12-01      1922063.180  2235731.340  2546035.370  2877036.440   \n",
              "2011-01-01       647498.140   717571.490   790074.910   861945.391   \n",
              "2011-02-01       350002.930   399676.640   461969.440   517210.780   \n",
              "2011-03-01       422712.270   487536.420   558060.040   628907.660   \n",
              "2011-04-01       256875.401   285381.301   319390.911   325722.911   \n",
              "2011-05-01       242326.860   275495.200   454679.430          NaN   \n",
              "2011-06-01       264357.210   272500.430          NaN          NaN   \n",
              "2011-07-01       143727.891          NaN          NaN          NaN   \n",
              "2011-08-01              NaN          NaN          NaN          NaN   \n",
              "2011-09-01              NaN          NaN          NaN          NaN   \n",
              "2011-10-01              NaN          NaN          NaN          NaN   \n",
              "2011-11-01              NaN          NaN          NaN          NaN   \n",
              "2011-12-01              NaN          NaN          NaN          NaN   \n",
              "\n",
              "CohortIndex              9            10           11          12  \n",
              "FirstOrderDate                                                     \n",
              "2010-12-01      3348828.570  3804307.470  4316648.550  4502009.52  \n",
              "2011-01-01       973316.091  1096568.951  1122956.981         NaN  \n",
              "2011-02-01       581899.640   592499.860          NaN         NaN  \n",
              "2011-03-01       641668.760          NaN          NaN         NaN  \n",
              "2011-04-01              NaN          NaN          NaN         NaN  \n",
              "2011-05-01              NaN          NaN          NaN         NaN  \n",
              "2011-06-01              NaN          NaN          NaN         NaN  \n",
              "2011-07-01              NaN          NaN          NaN         NaN  \n",
              "2011-08-01              NaN          NaN          NaN         NaN  \n",
              "2011-09-01              NaN          NaN          NaN         NaN  \n",
              "2011-10-01              NaN          NaN          NaN         NaN  \n",
              "2011-11-01              NaN          NaN          NaN         NaN  \n",
              "2011-12-01              NaN          NaN          NaN         NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-95ba1d70-647f-4c1a-aee4-c39eaba5a9e2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>CohortIndex</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>10</th>\n",
              "      <th>11</th>\n",
              "      <th>12</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FirstOrderDate</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2010-12-01</th>\n",
              "      <td>570422.730</td>\n",
              "      <td>846157.200</td>\n",
              "      <td>1079547.670</td>\n",
              "      <td>1381915.110</td>\n",
              "      <td>1585949.490</td>\n",
              "      <td>1922063.180</td>\n",
              "      <td>2235731.340</td>\n",
              "      <td>2546035.370</td>\n",
              "      <td>2877036.440</td>\n",
              "      <td>3348828.570</td>\n",
              "      <td>3804307.470</td>\n",
              "      <td>4316648.550</td>\n",
              "      <td>4502009.52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-01-01</th>\n",
              "      <td>292366.840</td>\n",
              "      <td>347360.700</td>\n",
              "      <td>410517.710</td>\n",
              "      <td>482043.800</td>\n",
              "      <td>563033.570</td>\n",
              "      <td>647498.140</td>\n",
              "      <td>717571.490</td>\n",
              "      <td>790074.910</td>\n",
              "      <td>861945.391</td>\n",
              "      <td>973316.091</td>\n",
              "      <td>1096568.951</td>\n",
              "      <td>1122956.981</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-02-01</th>\n",
              "      <td>157700.590</td>\n",
              "      <td>186638.230</td>\n",
              "      <td>227602.700</td>\n",
              "      <td>275758.090</td>\n",
              "      <td>315847.260</td>\n",
              "      <td>350002.930</td>\n",
              "      <td>399676.640</td>\n",
              "      <td>461969.440</td>\n",
              "      <td>517210.780</td>\n",
              "      <td>581899.640</td>\n",
              "      <td>592499.860</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-03-01</th>\n",
              "      <td>199619.670</td>\n",
              "      <td>229660.010</td>\n",
              "      <td>288618.420</td>\n",
              "      <td>331357.500</td>\n",
              "      <td>382749.940</td>\n",
              "      <td>422712.270</td>\n",
              "      <td>487536.420</td>\n",
              "      <td>558060.040</td>\n",
              "      <td>628907.660</td>\n",
              "      <td>641668.760</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-04-01</th>\n",
              "      <td>121809.051</td>\n",
              "      <td>151207.641</td>\n",
              "      <td>176236.211</td>\n",
              "      <td>200519.001</td>\n",
              "      <td>226772.161</td>\n",
              "      <td>256875.401</td>\n",
              "      <td>285381.301</td>\n",
              "      <td>319390.911</td>\n",
              "      <td>325722.911</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-05-01</th>\n",
              "      <td>123739.300</td>\n",
              "      <td>142381.000</td>\n",
              "      <td>162536.730</td>\n",
              "      <td>181698.900</td>\n",
              "      <td>209451.520</td>\n",
              "      <td>242326.860</td>\n",
              "      <td>275495.200</td>\n",
              "      <td>454679.430</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-06-01</th>\n",
              "      <td>135414.800</td>\n",
              "      <td>150153.290</td>\n",
              "      <td>164257.660</td>\n",
              "      <td>195156.220</td>\n",
              "      <td>221826.120</td>\n",
              "      <td>264357.210</td>\n",
              "      <td>272500.430</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-07-01</th>\n",
              "      <td>73860.401</td>\n",
              "      <td>85650.071</td>\n",
              "      <td>101138.441</td>\n",
              "      <td>118530.371</td>\n",
              "      <td>137687.191</td>\n",
              "      <td>143727.891</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-08-01</th>\n",
              "      <td>79601.140</td>\n",
              "      <td>100534.900</td>\n",
              "      <td>135993.380</td>\n",
              "      <td>180481.030</td>\n",
              "      <td>195765.390</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-09-01</th>\n",
              "      <td>154734.091</td>\n",
              "      <td>183435.241</td>\n",
              "      <td>220334.191</td>\n",
              "      <td>232633.721</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-10-01</th>\n",
              "      <td>173425.190</td>\n",
              "      <td>213116.590</td>\n",
              "      <td>225683.870</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-11-01</th>\n",
              "      <td>135131.330</td>\n",
              "      <td>150354.670</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-12-01</th>\n",
              "      <td>27005.460</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-95ba1d70-647f-4c1a-aee4-c39eaba5a9e2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-95ba1d70-647f-4c1a-aee4-c39eaba5a9e2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-95ba1d70-647f-4c1a-aee4-c39eaba5a9e2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3302b367-4f9c-4a3a-b033-38addb06a952\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3302b367-4f9c-4a3a-b033-38addb06a952')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3302b367-4f9c-4a3a-b033-38addb06a952 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_97bd5fb8-c8e6-48cb-ac47-3752a219a18d\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cohort_cumulative_revenue')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_97bd5fb8-c8e6-48cb-ac47-3752a219a18d button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('cohort_cumulative_revenue');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "cohort_cumulative_revenue",
              "summary": "{\n  \"name\": \"cohort_cumulative_revenue\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": \"FirstOrderDate\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-12-01 00:00:00\",\n        \"max\": \"2011-12-01 00:00:00\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"2011-11-01 00:00:00\",\n          \"2011-09-01 00:00:00\",\n          \"2010-12-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 135778.20783663838,\n        \"min\": 27005.46,\n        \"max\": 570422.73,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          135131.33,\n          154734.09100000001,\n          570422.73\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 204916.84469764872,\n        \"min\": 85650.071,\n        \"max\": 846157.2,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          213116.59,\n          183435.241,\n          846157.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 2,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 274805.6873706233,\n        \"min\": 101138.44099999999,\n        \"max\": 1079547.67,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          162536.73,\n          1079547.67,\n          220334.191\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 3,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 373904.087808354,\n        \"min\": 118530.37099999998,\n        \"max\": 1381915.1099999999,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          180481.03,\n          482043.80000000005,\n          181698.90000000002\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 4,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 453137.1954068016,\n        \"min\": 137687.191,\n        \"max\": 1585949.4899999998,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          137687.191,\n          563033.5700000001,\n          209451.52000000002\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 5,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 582196.4561504633,\n        \"min\": 143727.891,\n        \"max\": 1922063.1799999997,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          647498.1400000001,\n          242326.86000000002,\n          1922063.1799999997\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 6,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 709657.1682474617,\n        \"min\": 272500.42999999993,\n        \"max\": 2235731.34,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          2235731.34,\n          717571.4900000001,\n          275495.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 7,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 843041.6239390228,\n        \"min\": 319390.911,\n        \"max\": 2546035.37,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2546035.37,\n          790074.9100000001,\n          454679.43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 8,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1043896.5631044933,\n        \"min\": 325722.911,\n        \"max\": 2877036.44,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          861945.3910000002,\n          325722.911,\n          517210.7799999999\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 9,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1319546.595628379,\n        \"min\": 581899.6399999999,\n        \"max\": 3348828.57,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          973316.0910000001,\n          641668.76,\n          3348828.57\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 10,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1727312.0572839847,\n        \"min\": 592499.8599999999,\n        \"max\": 3804307.4699999997,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3804307.4699999997,\n          1096568.9510000001,\n          592499.8599999999\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 11,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2258280.9654582045,\n        \"min\": 1122956.9810000001,\n        \"max\": 4316648.55,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1122956.9810000001,\n          4316648.55\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 12,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4502009.52,\n        \"max\": 4502009.52,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4502009.52\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 89
        }
      ],
      "source": [
        "cohort_cumulative_revenue = (\n",
        "    df1.groupby(['FirstOrderDate', 'CohortIndex'])['Sales'].sum()\n",
        "    .unstack()  # Reshapes the grouped data into a pivot table\n",
        "    .cumsum(axis=1)  # Calculates the cumulative sum across columns (CohortIndex)\n",
        ")\n",
        "cohort_cumulative_revenue\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "QQRqjuDqo7sQ",
        "outputId": "53fd18dd-ba24-4d49-f443-b1a17e5a7662"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(15, 8))\n",
        "plt.title('Cohort Cumulative Lifetime Revenue')\n",
        "sns.heatmap(data=cohort_cumulative_revenue,annot = True,vmin = 0.0,fmt=\".0f\",cmap=\"coolwarm\")\n",
        "plt.show()"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "data-env01",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.19"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}